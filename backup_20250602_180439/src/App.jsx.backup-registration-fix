import React, { useEffect, useCallback } from 'react';
import { AppProvider, useApp } from './context/AppContext';
import Header from './components/Layout/Header';
import LandingView from './components/Views/LandingView';
import LoginView from './components/Views/LoginView';
import RegistrationView from './components/Views/RegistrationView';
import HomeView from './components/Views/HomeView';
import VenueDetailsView from './components/Views/VenueDetailsView';
import ShareModal from './components/Social/ShareModal';
import RatingModal from './components/Venue/RatingModal';
import ReportModal from './components/Venue/ReportModal';
import UserProfileModal from './components/User/UserProfileModal';
import './App.css';

function AppContent() {
  const { state, actions } = useApp();

  const handleSelectUserType = (userType) => {
    actions.setUserType(userType);
    if (userType === 'user') {
      actions.setCurrentView('login');
    } else {
      actions.setCurrentView('home');
      actions.addNotification({
        type: 'success',
        message: '🏢 Welcome to nYtevibe Business! Start showcasing your venue.',
        duration: 4000
      });
    }
  };

  const handleLogin = useCallback(async (credentials) => {
    const result = await actions.loginUser(credentials);
    if (result.success) {
      actions.addNotification({
        type: 'success',
        message: `🎉 Welcome back! Start discovering Houston's best nightlife.`,
        duration: 4000
      });
    }
    return result;
  }, [actions]);

  const handleRegister = useCallback(async (userData) => {
    const result = await actions.registerUser(userData);
    if (result.success) {
      actions.addNotification({
        type: 'success',
        message: `🎉 Welcome to nYtevibe! Your account has been created successfully.`,
        duration: 5000
      });
    }
    return result;
  }, [actions]);

  const handleLogout = useCallback(async () => {
    await actions.logoutUser();
    actions.addNotification({
      type: 'info',
      message: '👋 You have been logged out successfully.',
      duration: 3000
    });
  }, [actions]);

  const handleBackToLanding = () => {
    actions.setCurrentView('landing');
    actions.setUserType(null);
  };

  const handleSwitchToLogin = () => {
    actions.setCurrentView('login');
  };

  const handleSwitchToRegister = () => {
    actions.setCurrentView('register');
  };

  const handleBackToHome = () => {
    actions.setCurrentView('home');
    actions.setSelectedVenue(null);
  };

  const handleVenueSelect = (venue) => {
    actions.setSelectedVenue(venue);
    actions.setCurrentView('details');
  };

  const showHeader = !['landing', 'login', 'register'].includes(state.currentView);

  return (
    <div className="app-layout">
      {showHeader && (
        <Header
          onLogout={handleLogout}
        />
      )}

      <main className="main-content">
        {state.currentView === 'landing' && (
          <LandingView onSelectUserType={handleSelectUserType} />
        )}

        {state.currentView === 'login' && (
          <LoginView
            onBack={handleBackToLanding}
            onLogin={handleLogin}
            onSwitchToRegister={handleSwitchToRegister}
          />
        )}

        {state.currentView === 'register' && (
          <RegistrationView
            onBack={handleBackToLanding}
            onRegister={handleRegister}
            onSwitchToLogin={handleSwitchToLogin}
          />
        )}

        {state.currentView === 'home' && (
          <HomeView
            onVenueSelect={handleVenueSelect}
          />
        )}

        {state.currentView === 'details' && (
          <VenueDetailsView
            onBack={handleBackToHome}
          />
        )}
      </main>

      <ShareModal />
      <RatingModal />
      <ReportModal />
      <UserProfileModal />

      {state.notifications.length > 0 && (
        <div className="notification-container">
          {state.notifications.map((notification) => (
            <div
              key={notification.id}
              className={`notification notification-${notification.type}`}
            >
              <div className="notification-content">
                <span className="notification-message">
                  {notification.message}
                </span>
                <button
                  className="notification-close"
                  onClick={() => actions.removeNotification(notification.id)}
                >
                  ×
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

function App() {
  return (
    <AppProvider>
      <AppContent />
    </AppProvider>
  );
}

export default App;
