import React, { createContext, useContext, useReducer, useCallback } from 'react';
import apiService from '../services/apiService';

const AppContext = createContext();

export const useApp = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
};

const initialState = {
  // Navigation & Views
  currentView: 'landing',
  selectedVenue: null,
  userType: null,

  // Authentication
  isAuthenticated: false,
  authenticatedUser: null,

  // Modal States
  showShareModal: false,
  showRatingModal: false,
  showReportModal: false,
  showUserProfileModal: false,
  shareVenue: null,

  // User Data
  userProfile: {
    id: 'usr_demo',
    username: 'demouser',
    firstName: 'Demo',
    lastName: 'User',
    email: 'demo@nytevibe.com',
    level: 3,
    points: 250,
    totalRatings: 12,
    totalReports: 8,
    following: 15,
    badges: ['Early Adopter', 'Community Contributor']
  },

  // Venue Data (demo data)
  venues: [
    {
      id: 'venue_1',
      name: 'Skyline Rooftop',
      type: 'Rooftop Bar',
      address: '1200 McKinney St, Houston, TX 77010',
      rating: 4.5,
      totalRatings: 342,
      crowdLevel: 3,
      waitTime: 15,
      lastUpdate: '5 min ago',
      confidence: 89,
      followersCount: 1250,
      reports: 145,
      vibe: ['Upscale', 'City Views', 'Cocktails', 'Live DJ'],
      phone: '(713) 555-0123',
      hours: 'Mon-Sun: 5:00 PM - 2:00 AM',
      hasPromotion: true,
      promotionText: 'Happy Hour: Half-price cocktails 5-7 PM'
    }
  ],

  // Search & Filters
  searchQuery: '',
  activeFilter: 'all',
  
  // Notifications
  notifications: [],
  lastDataUpdate: new Date().toLocaleTimeString()
};

const actionTypes = {
  SET_CURRENT_VIEW: 'SET_CURRENT_VIEW',
  SET_SELECTED_VENUE: 'SET_SELECTED_VENUE',
  SET_USER_TYPE: 'SET_USER_TYPE',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGOUT: 'LOGOUT',
  REGISTER_SUCCESS: 'REGISTER_SUCCESS',
  UPDATE_USER_PROFILE: 'UPDATE_USER_PROFILE',
  SET_SHOW_SHARE_MODAL: 'SET_SHOW_SHARE_MODAL',
  SET_SHOW_RATING_MODAL: 'SET_SHOW_RATING_MODAL',
  SET_SHOW_REPORT_MODAL: 'SET_SHOW_REPORT_MODAL',
  SET_SHOW_USER_PROFILE_MODAL: 'SET_SHOW_USER_PROFILE_MODAL',
  SET_SHARE_VENUE: 'SET_SHARE_VENUE',
  FOLLOW_VENUE: 'FOLLOW_VENUE',
  UNFOLLOW_VENUE: 'UNFOLLOW_VENUE',
  RATE_VENUE: 'RATE_VENUE',
  REPORT_VENUE: 'REPORT_VENUE',
  SET_SEARCH_QUERY: 'SET_SEARCH_QUERY',
  SET_ACTIVE_FILTER: 'SET_ACTIVE_FILTER',
  ADD_NOTIFICATION: 'ADD_NOTIFICATION',
  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',
  UPDATE_VENUE_DATA: 'UPDATE_VENUE_DATA',
  RESET_USER_DATA: 'RESET_USER_DATA'
};

const appReducer = (state, action) => {
  switch (action.type) {
    case actionTypes.SET_CURRENT_VIEW:
      return { ...state, currentView: action.payload };

    case actionTypes.SET_SELECTED_VENUE:
      return { ...state, selectedVenue: action.payload };

    case actionTypes.SET_USER_TYPE:
      return { ...state, userType: action.payload };

    case actionTypes.LOGIN_SUCCESS:
      return {
        ...state,
        isAuthenticated: true,
        authenticatedUser: action.payload,
        currentView: 'home'
      };

    case actionTypes.REGISTER_SUCCESS:
      return {
        ...state,
        isAuthenticated: true,
        authenticatedUser: action.payload,
        userProfile: { ...state.userProfile, ...action.payload },
        currentView: 'home'
      };

    case actionTypes.LOGOUT:
      return {
        ...state,
        isAuthenticated: false,
        authenticatedUser: null,
        currentView: 'landing',
        userType: null
      };

    case actionTypes.ADD_NOTIFICATION:
      return {
        ...state,
        notifications: [...state.notifications, { 
          id: Date.now(), 
          ...action.payload,
          timestamp: new Date()
        }]
      };

    case actionTypes.REMOVE_NOTIFICATION:
      return {
        ...state,
        notifications: state.notifications.filter(n => n.id !== action.payload)
      };

    default:
      return state;
  }
};

export const AppProvider = ({ children }) => {
  const [state, dispatch] = useReducer(appReducer, initialState);

  const setCurrentView = useCallback((view) => {
    dispatch({ type: actionTypes.SET_CURRENT_VIEW, payload: view });
  }, []);

  const setSelectedVenue = useCallback((venue) => {
    dispatch({ type: actionTypes.SET_SELECTED_VENUE, payload: venue });
  }, []);

  const setUserType = useCallback((userType) => {
    dispatch({ type: actionTypes.SET_USER_TYPE, payload: userType });
  }, []);

  const loginUser = useCallback(async (credentials) => {
    try {
      const response = await apiService.login(credentials.email, credentials.password);
      if (response.status === 'success') {
        dispatch({
          type: actionTypes.LOGIN_SUCCESS,
          payload: response.data.user
        });
        return { success: true, user: response.data.user };
      }
      return { success: false, error: response.message || 'Login failed' };
    } catch (error) {
      return {
        success: false,
        error: error.message || 'Login failed'
      };
    }
  }, []);

  const registerUser = useCallback(async (userData) => {
    try {
      console.log('ðŸ“‹ Registration attempt with data:', userData);
      
      const response = await apiService.register(userData);
      if (response.status === 'success') {
        dispatch({
          type: actionTypes.REGISTER_SUCCESS,
          payload: response.data.user
        });
        return { success: true, user: response.data.user };
      }
      return { success: false, error: response.message || 'Registration failed' };
    } catch (error) {
      console.error('Registration error in context:', error);
      return {
        success: false,
        error: error.message || 'Registration failed'
      };
    }
  }, []);

  const logoutUser = useCallback(async () => {
    try {
      await apiService.logout();
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      dispatch({ type: actionTypes.LOGOUT });
    }
  }, []);

  const addNotification = useCallback((notification) => {
    const notificationWithId = { ...notification, id: Date.now() };
    dispatch({ type: actionTypes.ADD_NOTIFICATION, payload: notificationWithId });
    
    const duration = notification.duration || 4000;
    setTimeout(() => {
      dispatch({ type: actionTypes.REMOVE_NOTIFICATION, payload: notificationWithId.id });
    }, duration);
  }, []);

  const removeNotification = useCallback((id) => {
    dispatch({ type: actionTypes.REMOVE_NOTIFICATION, payload: id });
  }, []);

  const actions = {
    setCurrentView,
    setSelectedVenue,
    setUserType,
    loginUser,
    registerUser,
    logoutUser,
    addNotification,
    removeNotification
  };

  return (
    <AppContext.Provider value={{ state, actions }}>
      {children}
    </AppContext.Provider>
  );
};
