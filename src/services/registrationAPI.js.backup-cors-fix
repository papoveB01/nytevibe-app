/**
 * nYtevibe Registration API Service - Enhanced Network Debugging
 * Comprehensive network error handling and debugging
 */

const API_CONFIG = {
    baseURL: 'https://system.nytevibe.com/api',
    timeout: 45000, // Increased timeout
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
    }
};

class APIError extends Error {
    constructor(errorData, status) {
        super(errorData.message || 'API Error');
        this.status = status;
        this.errors = errorData.errors || {};
        this.code = errorData.code;
        this.retryAfter = errorData.retry_after;
        
        // Enhanced debugging
        console.error('APIError created:', {
            status: this.status,
            message: this.message,
            errors: this.errors,
            code: this.code
        });
    }
}

class RegistrationAPI {
    constructor() {
        this.baseURL = API_CONFIG.baseURL;
    }

    // Network connectivity test
    async testConnectivity() {
        console.log('üåê Testing API connectivity...');
        try {
            const response = await fetch('https://system.nytevibe.com', {
                method: 'HEAD',
                mode: 'no-cors' // Bypass CORS for connectivity test
            });
            console.log('‚úÖ Basic connectivity test passed');
            return true;
        } catch (error) {
            console.error('‚ùå Basic connectivity test failed:', error);
            return false;
        }
    }

    // Enhanced fetch with retry logic
    async enhancedFetch(url, options, retries = 3) {
        console.log(`üîÑ Making request to: ${url}`);
        console.log('üì§ Request options:', {
            method: options.method,
            headers: options.headers,
            bodyLength: options.body ? options.body.length : 0
        });

        for (let attempt = 1; attempt <= retries; attempt++) {
            try {
                console.log(`üì° Attempt ${attempt}/${retries}...`);
                
                // Create AbortController for timeout
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);
                
                const response = await fetch(url, {
                    ...options,
                    signal: controller.signal
                });
                
                clearTimeout(timeoutId);
                
                console.log(`üì• Response received:`, {
                    status: response.status,
                    statusText: response.statusText,
                    headers: Object.fromEntries(response.headers.entries()),
                    url: response.url
                });
                
                return response;
                
            } catch (error) {
                console.error(`üí• Attempt ${attempt} failed:`, {
                    name: error.name,
                    message: error.message,
                    code: error.code,
                    type: error.constructor.name
                });
                
                // If this is the last attempt, throw the error
                if (attempt === retries) {
                    throw error;
                }
                
                // Wait before retrying (exponential backoff)
                const delay = Math.pow(2, attempt) * 1000;
                console.log(`‚è≥ Waiting ${delay}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }

    async register(userData) {
        console.log('üöÄ Registration Process Started');
        console.log('üìä Environment Info:', {
            userAgent: navigator.userAgent,
            online: navigator.onLine,
            url: window.location.href,
            timestamp: new Date().toISOString()
        });
        
        // Test connectivity first
        const connectivityOk = await this.testConnectivity();
        if (!connectivityOk) {
            console.warn('‚ö†Ô∏è Connectivity test failed, but proceeding anyway...');
        }
        
        console.log('üì§ Registration data being sent:', userData);
        
        try {
            const response = await this.enhancedFetch(`${this.baseURL}/auth/register`, {
                method: 'POST',
                headers: {
                    ...API_CONFIG.headers,
                    'Origin': window.location.origin // Use dynamic origin
                },
                body: JSON.stringify(userData),
                credentials: 'include'
            });

            // Parse response
            let data;
            const contentType = response.headers.get('Content-Type');
            console.log('üìã Response Content-Type:', contentType);
            
            try {
                data = await response.json();
                console.log('üì• Parsed response data:', data);
            } catch (parseError) {
                console.error('üí• Failed to parse JSON response:', parseError);
                const textContent = await response.text();
                console.log('üìÑ Raw response text:', textContent);
                
                throw new APIError({
                    message: 'Invalid response format from server',
                    code: 'INVALID_RESPONSE'
                }, response.status);
            }

            if (!response.ok) {
                console.error('‚ùå Registration failed with status:', response.status);
                throw new APIError(data, response.status);
            }

            console.log('‚úÖ Registration successful!');
            return data;
            
        } catch (error) {
            console.error('üí• Registration error details:', {
                name: error.name,
                message: error.message,
                stack: error.stack,
                cause: error.cause
            });
            
            if (error instanceof APIError) {
                throw error;
            }
            
            // Analyze the error type
            let errorMessage = 'Network error. Please check your connection.';
            let errorCode = 'NETWORK_ERROR';
            
            if (error.name === 'AbortError') {
                errorMessage = 'Request timed out. Please try again.';
                errorCode = 'TIMEOUT_ERROR';
            } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
                errorMessage = 'Unable to connect to server. Please check your internet connection.';
                errorCode = 'CONNECTION_ERROR';
            } else if (error.message.includes('CORS')) {
                errorMessage = 'Cross-origin request blocked. Please contact support.';
                errorCode = 'CORS_ERROR';
            } else if (error.message.includes('SSL') || error.message.includes('certificate')) {
                errorMessage = 'SSL certificate error. Please try again or contact support.';
                errorCode = 'SSL_ERROR';
            }
            
            console.error(`üîç Error analysis: ${errorCode} - ${errorMessage}`);
            
            const networkError = new APIError({
                message: errorMessage,
                code: errorCode,
                originalError: error.message
            }, 0);
            
            throw networkError;
        }
    }

    // Placeholder for future country API call
    async getCountries() {
        // Return hardcoded US and Canada for now
        return [
            { code: 'US', name: 'United States' },
            { code: 'CA', name: 'Canada' }
        ];
    }
}

export default new RegistrationAPI();
export { APIError };
