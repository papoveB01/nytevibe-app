/**
 * Reset Password View Component
 * nYtevibe Password Reset Implementation
 * 
 * Handles password reset form with token validation
 */

import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import authAPI from '../../services/authAPI';
import { 
  validatePasswordResetForm, 
  getPasswordStrength,
  getPasswordResetErrorMessage,
  formatRetryCountdown 
} from '../../utils/authUtils';
import { 
  getTokenFromURL, 
  getEmailFromURL, 
  validateResetURL, 
  cleanResetURLParams 
} from '../../utils/urlUtils';

const ResetPasswordView = () => {
  const navigate = useNavigate();

  // URL parameters
  const [token, setToken] = useState('');
  const [email, setEmail] = useState('');

  // Form state
  const [password, setPassword] = useState('');
  const [passwordConfirmation, setPasswordConfirmation] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // UI state
  const [isLoading, setIsLoading] = useState(false);
  const [validationErrors, setValidationErrors] = useState({});
  const [tokenValidated, setTokenValidated] = useState(false);
  const [tokenValidating, setTokenValidating] = useState(true);

  // Success state
  const [resetSuccess, setResetSuccess] = useState(false);
  const [redirectCountdown, setRedirectCountdown] = useState(5);

  // Rate limiting state
  const [isRateLimited, setIsRateLimited] = useState(false);
  const [retryCountdown, setRetryCountdown] = useState(0);

  // Error state
  const [error, setError] = useState('');

  // Initialize token validation on mount
  useEffect(() => {
    const initializeReset = async () => {
      const urlValidation = validateResetURL();
      
      if (!urlValidation.isValid) {
        setError('Invalid reset link. Please request a new password reset.');
        setTokenValidating(false);
        return;
      }

      setToken(urlValidation.token);
      setEmail(urlValidation.email);

      // Validate token with backend
      try {
        const result = await authAPI.verifyResetToken(urlValidation.token, urlValidation.email);
        
        if (result.success) {
          setTokenValidated(true);
        } else {
          setError(getPasswordResetErrorMessage(result.error, result.code));
        }
      } catch (error) {
        console.error('Token validation error:', error);
        setError('Failed to validate reset link. Please try again.');
      }
      
      setTokenValidating(false);
    };

    initializeReset();
  }, []);

  // Rate limiting countdown effect
  useEffect(() => {
    let interval = null;
    if (isRateLimited && retryCountdown > 0) {
      interval = setInterval(() => {
        setRetryCountdown(prev => {
          if (prev <= 1) {
            setIsRateLimited(false);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isRateLimited, retryCountdown]);

  // Success redirect countdown effect
  useEffect(() => {
    let interval = null;
    if (resetSuccess && redirectCountdown > 0) {
      interval = setInterval(() => {
        setRedirectCountdown(prev => {
          if (prev <= 1) {
            cleanResetURLParams();
            navigate('/login', { 
              state: { 
                message: 'Password reset successful! You can now log in with your new password.' 
              } 
            });
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [resetSuccess, redirectCountdown, navigate]);

  // Clear errors when user types
  useEffect(() => {
    if (password || passwordConfirmation) {
      setError('');
      setValidationErrors({});
    }
  }, [password, passwordConfirmation]);

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
  };

  const handlePasswordConfirmationChange = (e) => {
    setPasswordConfirmation(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Clear previous states
    setError('');
    setValidationErrors({});

    // Validate form
    const validation = validatePasswordResetForm(password, passwordConfirmation);

    if (!validation.isValid) {
      setValidationErrors(validation.errors);
      return;
    }

    setIsLoading(true);

    try {
      const result = await authAPI.resetPassword(token, email, password, passwordConfirmation);

      if (result.success) {
        setResetSuccess(true);
        setPassword('');
        setPasswordConfirmation('');
      } else {
        handleError(result);
      }
    } catch (error) {
      console.error('Reset password error:', error);
      setError('An unexpected error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleError = (result) => {
    const { error, code, retryAfter, details } = result;

    switch (code) {
      case 'RATE_LIMIT_EXCEEDED':
        setIsRateLimited(true);
        setRetryCountdown(retryAfter || 60);
        break;
      
      case 'VALIDATION_ERROR':
        if (details) {
          setValidationErrors(details);
        } else {
          setError(getPasswordResetErrorMessage(error, code, result.data));
        }
        break;
      
      case 'INVALID_TOKEN':
        setError(getPasswordResetErrorMessage(error, code));
        setTimeout(() => {
          navigate('/forgot-password');
        }, 3000);
        break;
      
      default:
        setError(getPasswordResetErrorMessage(error, code, result.data));
        break;
    }
  };

  const getPasswordStrengthInfo = () => {
    if (!password) return null;
    return getPasswordStrength(password);
  };

  const isFormValid = () => {
    return password && 
           passwordConfirmation && 
           password === passwordConfirmation && 
           getPasswordStrength(password).score >= 4;
  };

  if (tokenValidating) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="loading-state">
            <span className="loading-spinner"></span>
            <p>Validating reset link...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!tokenValidated) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="invalid-token">
            <div className="error-icon">‚ùå</div>
            <h2>Invalid Reset Link</h2>
            <p>{error}</p>
            <Link to="/forgot-password" className="auth-button primary">
              Request New Reset Link
            </Link>
          </div>
        </div>
      </div>
    );
  }

  if (resetSuccess) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="reset-success">
            <div className="success-icon">‚úÖ</div>
            <h2>Password Reset Successful</h2>
            <p>Your password has been updated successfully.</p>
            <p>Redirecting to login in <strong>{redirectCountdown}</strong> seconds...</p>
            <Link to="/login" className="auth-button primary">
              Login Now
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="auth-container">
      <div className="auth-card">
        {/* Header Section */}
        <div className="auth-header">
          <h1>Set New Password</h1>
          <p>Create a strong, secure password for your account</p>
        </div>

        {/* Rate Limiting Banner */}
        {isRateLimited && (
          <div className="rate-limit-banner">
            <div className="rate-limit-content">
              <div className="warning-icon">‚è∞</div>
              <div>
                <p><strong>Too many attempts</strong></p>
                <p>Please wait <strong>{formatRetryCountdown(retryCountdown)}</strong> before trying again</p>
              </div>
            </div>
          </div>
        )}

        {/* Error Banner */}
        {error && (
          <div className="error-banner">
            <div className="error-content">
              <div className="error-icon">‚ùå</div>
              <div>
                <p>{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Form Section */}
        <form onSubmit={handleSubmit} noValidate>
          {/* New Password Field */}
          <div className="form-group">
            <label htmlFor="password">New Password</label>
            <div className="password-input-wrapper">
              <input
                id="password"
                type={showPassword ? 'text' : 'password'}
                value={password}
                onChange={handlePasswordChange}
                placeholder="Enter new password"
                disabled={isLoading || isRateLimited}
                className={validationErrors.password ? 'error' : ''}
                autoComplete="new-password"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="password-toggle"
                disabled={isLoading || isRateLimited}
              >
                {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
            
            {/* Password Strength Indicator */}
            {password && (
              <div className="password-strength">
                <div className="strength-bar">
                  <div 
                    className="strength-fill" 
                    style={{ 
                      width: `${(getPasswordStrengthInfo()?.score || 0) * 16.67}%`,
                      backgroundColor: getPasswordStrengthInfo()?.color 
                    }}
                  ></div>
                </div>
                <span 
                  className="strength-label"
                  style={{ color: getPasswordStrengthInfo()?.color }}
                >
                  {getPasswordStrengthInfo()?.label}
                </span>
              </div>
            )}
            
            {validationErrors.password && (
              <div className="field-errors">
                {Array.isArray(validationErrors.password) 
                  ? validationErrors.password.map((error, index) => (
                      <span key={index} className="error-text">{error}</span>
                    ))
                  : <span className="error-text">{validationErrors.password}</span>
                }
              </div>
            )}
          </div>

          {/* Confirm Password Field */}
          <div className="form-group">
            <label htmlFor="passwordConfirmation">Confirm Password</label>
            <div className="password-input-wrapper">
              <input
                id="passwordConfirmation"
                type={showConfirmPassword ? 'text' : 'password'}
                value={passwordConfirmation}
                onChange={handlePasswordConfirmationChange}
                placeholder="Confirm new password"
                disabled={isLoading || isRateLimited}
                className={validationErrors.passwordConfirmation ? 'error' : ''}
                autoComplete="new-password"
              />
              <button
                type="button"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="password-toggle"
                disabled={isLoading || isRateLimited}
              >
                {showConfirmPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
            {validationErrors.passwordConfirmation && (
              <span className="error-text">{validationErrors.passwordConfirmation}</span>
            )}
          </div>

          <button
            type="submit"
            disabled={isLoading || isRateLimited || !isFormValid()}
            className="auth-button primary"
          >
            {isLoading ? (
              <>
                <span className="loading-spinner"></span>
                Resetting Password...
              </>
            ) : (
              'Reset Password'
            )}
          </button>
        </form>

        {/* Security Tips */}
        <div className="security-tips">
          <h4>Password Requirements:</h4>
          <ul>
            <li>At least 8 characters long</li>
            <li>Contains uppercase and lowercase letters</li>
            <li>Includes at least one number</li>
            <li>Has at least one special character</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default ResetPasswordView;
