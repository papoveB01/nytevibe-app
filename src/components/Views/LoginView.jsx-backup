import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister, onForgotPassword }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;
