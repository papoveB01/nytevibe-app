/**
 * Forgot Password View Component
 * nYtevibe Password Reset Implementation
 * 
 * Handles the initial password reset request workflow
 */

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import authAPI from '../../services/authAPI';
import { 
  validateForgotPasswordForm, 
  sanitizeIdentifier, 
  getPasswordResetErrorMessage,
  maskEmail,
  formatRetryCountdown 
} from '../../utils/authUtils';

const ForgotPasswordView = () => {
  // Form state
  const [identifier, setIdentifier] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [validationErrors, setValidationErrors] = useState({});

  // Success state
  const [emailSent, setEmailSent] = useState(false);
  const [maskedEmail, setMaskedEmail] = useState('');

  // Rate limiting state
  const [isRateLimited, setIsRateLimited] = useState(false);
  const [retryCountdown, setRetryCountdown] = useState(0);

  // Error state
  const [error, setError] = useState('');

  // Rate limiting countdown effect
  useEffect(() => {
    let interval = null;
    if (isRateLimited && retryCountdown > 0) {
      interval = setInterval(() => {
        setRetryCountdown(prev => {
          if (prev <= 1) {
            setIsRateLimited(false);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isRateLimited, retryCountdown]);

  // Clear errors when user types
  useEffect(() => {
    if (identifier) {
      setError('');
      setValidationErrors({});
    }
  }, [identifier]);

  const handleIdentifierChange = (e) => {
    setIdentifier(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Clear previous states
    setError('');
    setValidationErrors({});

    // Sanitize and validate input
    const sanitizedIdentifier = sanitizeIdentifier(identifier);
    const validation = validateForgotPasswordForm(sanitizedIdentifier);

    if (!validation.isValid) {
      setValidationErrors(validation.errors);
      return;
    }

    setIsLoading(true);

    try {
      const result = await authAPI.forgotPassword(sanitizedIdentifier);

      if (result.success) {
        setEmailSent(true);
        setMaskedEmail(result.data?.email || maskEmail(sanitizedIdentifier));
        setIdentifier(''); // Clear form
      } else {
        handleError(result);
      }
    } catch (error) {
      console.error('Forgot password error:', error);
      setError('An unexpected error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleError = (result) => {
    const { error, code, retryAfter } = result;

    switch (code) {
      case 'RATE_LIMIT_EXCEEDED':
        setIsRateLimited(true);
        setRetryCountdown(retryAfter || 60);
        break;
      
      default:
        setError(getPasswordResetErrorMessage(error, code, result.data));
        break;
    }
  };

  const handleRetry = () => {
    setError('');
    setValidationErrors({});
    setEmailSent(false);
    setMaskedEmail('');
  };

  return (
    <div className="auth-container">
      <div className="auth-card">
        {/* Header Section */}
        <div className="auth-header">
          <h1>Reset Your Password</h1>
          <p>Enter your email or username to receive a reset link</p>
        </div>

        {/* Success Banner */}
        {emailSent && (
          <div className="success-banner">
            <div className="success-content">
              <div className="success-icon">✅</div>
              <div>
                <p><strong>Reset link sent!</strong></p>
                <p>We've sent a password reset link to <strong>{maskedEmail}</strong></p>
                <small>Check your email and follow the instructions. If you don't see it, check your spam folder.</small>
              </div>
            </div>
            <button 
              onClick={handleRetry}
              className="link-button"
              type="button"
            >
              Send another link
            </button>
          </div>
        )}

        {/* Rate Limiting Banner */}
        {isRateLimited && (
          <div className="rate-limit-banner">
            <div className="rate-limit-content">
              <div className="warning-icon">⏰</div>
              <div>
                <p><strong>Too many attempts</strong></p>
                <p>Please wait <strong>{formatRetryCountdown(retryCountdown)}</strong> before trying again</p>
              </div>
            </div>
          </div>
        )}

        {/* Error Banner */}
        {error && (
          <div className="error-banner">
            <div className="error-content">
              <div className="error-icon">❌</div>
              <div>
                <p>{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Form Section */}
        {!emailSent && (
          <form onSubmit={handleSubmit} noValidate>
            <div className="form-group">
              <label htmlFor="identifier">Email or Username</label>
              <input
                id="identifier"
                type="text"
                value={identifier}
                onChange={handleIdentifierChange}
                placeholder="Enter your email or username"
                disabled={isLoading || isRateLimited}
                className={validationErrors.identifier ? 'error' : ''}
                autoComplete="username"
                autoFocus
              />
              {validationErrors.identifier && (
                <span className="error-text">{validationErrors.identifier}</span>
              )}
            </div>

            <button
              type="submit"
              disabled={isLoading || isRateLimited || !identifier.trim()}
              className="auth-button primary"
            >
              {isLoading ? (
                <>
                  <span className="loading-spinner"></span>
                  Sending Reset Link...
                </>
              ) : (
                'Send Reset Link'
              )}
            </button>
          </form>
        )}

        {/* Navigation Links */}
        <div className="auth-links">
          <Link to="/login" className="link-button">
            <span className="arrow-left">←</span>
            Back to Login
          </Link>
        </div>

        {/* Help Text */}
        <div className="auth-help">
          <p><strong>Need help?</strong></p>
          <p>If you're having trouble resetting your password, please contact our support team.</p>
        </div>
      </div>
    </div>
  );
};

export default ForgotPasswordView;
