import React, { useState, useEffect } from 'react';
import { AppProvider, useApp } from './context/AppContext';
import { useVenues } from './hooks/useVenues';

// Views
import LoginView from './components/Views/LoginView';
import HomeView from './components/Views/HomeView';
import VenueDetailsView from './components/Views/VenueDetailsView';
import RegistrationView from './components/Registration/RegistrationView';
import EmailVerificationView from './components/Auth/EmailVerificationView';

// Components
import Header from './components/Header';
import Notifications from './components/Notifications';

// Modals
import RatingModal from './components/Modals/RatingModal';
import ReportModal from './components/Modals/ReportModal';
import ShareModal from './components/Modals/ShareModal';
import UserProfileModal from './components/User/UserProfileModal';

import './App.css';

function AppContent() {
const { state, actions } = useApp();
const { updateVenueData } = useVenues();
const [searchQuery, setSearchQuery] = useState('');
const [isMobile, setIsMobile] = useState(false);

// Mobile detection
useEffect(() => {
const checkMobile = () => {
const mobile = window.innerWidth <= 768 ||
/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
setIsMobile(mobile);
};

checkMobile();
window.addEventListener('resize', checkMobile);
return () => window.removeEventListener('resize', checkMobile);
}, []);

// Handle email verification from URL
useEffect(() => {
const urlParams = new URLSearchParams(window.location.search);
const verificationToken = urlParams.get('token');
const verifyEmail = urlParams.get('verify');

if (verificationToken && verifyEmail) {
actions.setCurrentView('email-verification');
// Clean up URL
window.history.replaceState({}, document.title, window.location.pathname);
}
}, [actions]);

// Update search query in context
useEffect(() => {
actions.setSearchQuery(searchQuery);
}, [searchQuery, actions]);

// Auto-update venue data periodically when authenticated
useEffect(() => {
if (state.isAuthenticated && !['login', 'register', 'email-verification'].includes(state.currentView)) {
const interval = setInterval(() => {
updateVenueData();
}, 45000);

return () => clearInterval(interval);
}
}, [updateVenueData, state.currentView, state.isAuthenticated]);

// Initialize app to login view if not authenticated
useEffect(() => {
if (!state.isAuthenticated && !['login', 'register', 'email-verification'].includes(state.currentView)) {
actions.setCurrentView('login');
}
}, [state.isAuthenticated, state.currentView, actions]);

const handleShowRegistration = () => {
actions.setCurrentView('register');
};

const handleBackToLogin = () => {
actions.setCurrentView('login');
};

const handleRegistrationSuccess = (userData) => {
// Registration success should redirect to login with verification message
actions.setCurrentView('login');
};

const handleEmailVerificationSuccess = () => {
actions.setCurrentView('login');
actions.clearVerificationMessage();
};

const handleVenueSelect = (venue) => {
actions.setSelectedVenue(venue);
actions.setCurrentView('details');
};

const handleBackToHome = () => {
actions.setCurrentView('home');
actions.setSelectedVenue(null);
};

const handleClearSearch = () => {
setSearchQuery('');
};

// Get verification token and email from URL or localStorage
const getVerificationData = () => {
const urlParams = new URLSearchParams(window.location.search);
const token = urlParams.get('token');
const email = urlParams.get('email') || localStorage.getItem('pending_verification_email');
return { token, email };
};

// Determine if header should be shown (not on login, register, or verification pages)
const showHeader = !['login', 'register', 'email-verification'].includes(state.currentView);

return (
<div className={`app ${isMobile ? 'mobile' : 'desktop'}`}>
{/* Header */}
{showHeader && (
<Header
searchQuery={searchQuery}
setSearchQuery={setSearchQuery}
onClearSearch={handleClearSearch}
isMobile={isMobile}
/>
)}

{/* Main Content */}
<main className={`main-content ${isMobile ? 'mobile-main' : ''}`}>
{state.currentView === 'login' && (
<LoginView onRegister={handleShowRegistration} />
)}

{state.currentView === 'register' && (
<RegistrationView
onBack={handleBackToLogin}
onSuccess={handleRegistrationSuccess}
/>
)}

{state.currentView === 'email-verification' && (
<EmailVerificationView
onBack={handleBackToLogin}
onSuccess={handleEmailVerificationSuccess}
token={getVerificationData().token}
email={getVerificationData().email}
/>
)}

{state.currentView === 'home' && (
<HomeView onVenueSelect={handleVenueSelect} />
)}

{state.currentView === 'details' && (
<VenueDetailsView onBack={handleBackToHome} />
)}
</main>

{/* Modals */}
<RatingModal />
<ReportModal />
<ShareModal />
<UserProfileModal />

{/* Notifications */}
<Notifications />
</div>
);
}

function App() {
return (
<AppProvider>
<AppContent />
</AppProvider>
);
}

export default App;
