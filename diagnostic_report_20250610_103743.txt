üìä PHASE 1: PROJECT STRUCTURE ANALYSIS
======================================
‚úÖ React project detected

üì¶ PACKAGE.JSON ANALYSIS
========================
React version:     "react": "^18.2.0",
React-DOM version:     "react-dom": "^18.2.0",
Vite version:     "dev": "vite",

üîç Checking for problematic dependencies:
‚úÖ No conflicting routers
‚úÖ No CSS-in-JS conflicts
‚úÖ No head management

‚öôÔ∏è  BUILD CONFIGURATION ANALYSIS
=================================
üìÑ Vite configuration found:
   ./vite.config.js

Vite config contents:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
})

üîß Other configuration files:
‚ùå No TypeScript config
‚ùå No .env file
‚ùå No .env.local
‚úÖ HTML template found

üìÅ SOURCE STRUCTURE ANALYSIS
============================
Key directories and files:
src/context/AppContext.jsx
src/hooks/useVenues.js
src/hooks/useNotifications.js
src/hooks/useAI.js
src/hooks/useAuthPersistence.js
src/router/ProtectedRoute.jsx
src/router/PublicRoute.jsx
src/router/routeConfig.js
src/router/AppRouter.jsx
src/App.jsx
src/main.jsx
src/services/registrationAPI.js
src/services/authAPI.js
src/services/emailVerificationAPI.js
src/ExistingApp.jsx
src/utils/registrationValidation.js
src/utils/healthCheckTest.js
src/utils/urlUtils.js
src/utils/authDebug.js
src/utils/authUtils.js

üö™ ENTRY POINT ANALYSIS
=======================
üìÑ Main entry (src/main.jsx):
import React from 'react'
import ReactDOM from 'react-dom/client'
import { AppProvider } from './context/AppContext'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AppProvider>
      <App />
    </AppProvider>
  </React.StrictMode>,
)

üèóÔ∏è  APP COMPONENT ANALYSIS
==========================
üìÑ App component (src/App.jsx):
import React, { useEffect, useState } from 'react';
import { BrowserRouter } from 'react-router-dom';
import { AppProvider, useApp } from './context/AppContext';
import ExistingApp from './ExistingApp';
import './App.css';

function AppContent() {
  const { state, actions } = useApp();
  const [isCheckingAuth, setIsCheckingAuth] = useState(true);

  useEffect(() => {
    const checkAuthStatus = async () => {
      console.log('[Persistent Login] Checking auth status...');
      
      try {
        const token = localStorage.getItem('auth_token');
        const userDataStr = localStorage.getItem('user_data');
        
        if (token && userDataStr) {
          try {
            const userData = JSON.parse(userDataStr);
            console.log('[Persistent Login] Found valid session, auto-logging in...');
            
            // Set user in context - use loginUser for backward compatibility
            if (actions.loginUser) {
              actions.loginUser(userData);
            } else if (actions.setUser && actions.setIsAuthenticated) {
              actions.setUser(userData);
              actions.setIsAuthenticated(true);
              actions.setCurrentView('home');
            }
          } catch (parseError) {
            console.error('[Persistent Login] Error parsing user data:', parseError);
            localStorage.removeItem('auth_token');
            localStorage.removeItem('user_data');
            actions.setCurrentView('login');
          }
        } else {
          console.log('[Persistent Login] No valid session found');
          actions.setCurrentView('login');
        }
      } catch (error) {
        console.error('[Persistent Login] Error during auth check:', error);
        actions.setCurrentView('login');
      } finally {
        setIsCheckingAuth(false);
      }
    };

    checkAuthStatus();
  }, [actions]);

  if (isCheckingAuth) {
    return (
      <div className="auth-check-loading" style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
        backgroundColor: '#121212',
        color: '#ffffff'
      }}>
        <h1 style={{ fontSize: '48px', marginBottom: '20px', color: '#FF6B6B' }}>nYtevibe</h1>
        <div className="spinner" style={{
          width: '50px',
          height: '50px',
          border: '3px solid #333',
          borderTopColor: '#FF6B6B',
          borderRadius: '50%',
          animation: 'spin 1s linear infinite'
        }}></div>
        <p style={{ marginTop: '20px' }}>Loading your nightlife experience...</p>
      </div>
    );
  }

  return <ExistingApp />;
}

function App() {
  return (
    <AppProvider>
      <BrowserRouter>
        <div className="App">
          <AppContent />
        </div>
      </BrowserRouter>
    </AppProvider>
  );
}

export default App;

üîó CONTEXT ANALYSIS
===================
Context files found:
üìÑ src/context:
File size: 0 lines
Exports: 

üìÑ src/context/AppContext.jsx.backup-globalize:
File size: 411 lines
Exports: export const AppProvider = ({ children }) => {
export const useApp = () => {

üìÑ src/context/AppContext.jsx.backup-email-verification:
File size: 561 lines
Exports: export function AppProvider({ children }) {
export function useApp() {

üìÑ src/context/AppContext.jsx.backup.090308:
File size: 865 lines
Exports: export function AppProvider({ children }) {
export function useApp() {
export { AppContext };

üìÑ src/context/AppContext.jsx.backup-mobile-enhance:
File size: 406 lines
Exports: export const AppProvider = ({ children }) => {
export const useApp = () => {

üìÑ src/context/AppContext.jsx.backup-registration-impl:
File size: 406 lines
Exports: export const AppProvider = ({ children }) => {
export const useApp = () => {

üìÑ src/context/AppContext.jsx:
File size: 865 lines
Exports: export function AppProvider({ children }) {
export function useApp() {
export { AppContext };

üéØ APPCONTEXT DETAILED ANALYSIS:
===============================
Full AppContext.jsx contents:
import React, { createContext, useContext, useReducer, useCallback, useEffect } from 'react';
import authAPI from '../services/authAPI';

const AppContext = createContext();

// Initial state
const initialState = {
  // Authentication & User
  user: null,
  isAuthenticated: false,
  userProfile: null,
  userType: null,
  
  // UI State
  currentView: 'landing',
  searchQuery: '',
  isLoading: true, // üî• FIX: Start with loading true for initialization
  
  // Venue Related
  selectedVenue: null,
  followedVenues: new Set(),
  
  // Notifications
  notifications: [],
  
  // Modal states
  showRatingModal: false,
  showReportModal: false,
  showShareModal: false,
  showUserProfileModal: false,
  
  // Registration state
  registrationStep: 1,
  registrationData: {},
  
  // Email verification state
  verificationMessage: {
    show: false,
    email: '',
    type: '' // 'registration_success', 'resend_verification'
  },
  
  // Share modal state
  shareVenue: null,
  
  // Error state
  error: null,
  
  // Demo venue data
  venues: [
    {
      id: 'venue_001',
      name: 'Rooftop Lounge',
      type: 'Rooftop Bar',
      address: '123 Downtown Ave, Houston, TX 77002',
      rating: 4.5,
      totalRatings: 324,
      crowdLevel: 75,
      waitTime: 15,
      followersCount: 1289,
      reports: 45,
      lastUpdate: '5 min ago',
      confidence: 92,
      hasPromotion: true,
      promotionText: 'Happy Hour: 50% off cocktails until 8 PM!',
      vibe: ['Upscale', 'City Views', 'Cocktails', 'Live Music'],
      phone: '+1-713-555-0123',
      hours: 'Mon-Thu 5PM-12AM, Fri-Sat 5PM-2AM, Sun 6PM-11PM',
      reviews: [
        {
          id: 'rev_001',
          user: 'Sarah M.',
          rating: 5,
          date: '2 days ago',
          comment: 'Amazing views and great cocktails! The rooftop atmosphere is perfect for date night.',
          helpful: 12
        },
        {
          id: 'rev_002',
          user: 'Mike R.',
          rating: 4,
          date: '1 week ago',
          comment: 'Good vibes and decent drinks. Can get crowded on weekends but worth the wait.',
          helpful: 8
        }
      ]
    },
    {
      id: 'venue_002',
      name: 'Underground Club',
      type: 'Dance Club',
      address: '456 Music District, Houston, TX 77004',
      rating: 4.2,
      totalRatings: 567,
      crowdLevel: 90,
      waitTime: 30,
      followersCount: 2134,
      reports: 78,
      lastUpdate: '2 min ago',
      confidence: 88,
      hasPromotion: false,
      promotionText: '',
      vibe: ['EDM', 'Dancing', 'Late Night', 'Underground'],
      phone: '+1-713-555-0124',
      hours: 'Thu-Sat 10PM-4AM',
      reviews: [
        {
          id: 'rev_003',
          user: 'Alex P.',
          rating: 5,
          date: '3 days ago',
          comment: 'Best EDM club in Houston! Amazing sound system and the crowd is always energetic.',
          helpful: 15
        }
      ]
    },
    {
      id: 'venue_003',
      name: 'Craft Beer Garden',
      type: 'Beer Garden',
      address: '789 Brewery Lane, Houston, TX 77006',
      rating: 4.7,
      totalRatings: 891,
      crowdLevel: 45,
      waitTime: 0,
      followersCount: 3456,
      reports: 23,
      lastUpdate: '1 min ago',
      confidence: 95,
      hasPromotion: true,
      promotionText: 'Try our new seasonal IPA - 20% off today only!',
      vibe: ['Craft Beer', 'Outdoor', 'Relaxed', 'Food Trucks'],
      phone: '+1-713-555-0125',
      hours: 'Mon-Wed 4PM-11PM, Thu-Sat 2PM-12AM, Sun 2PM-10PM',
      reviews: [
        {
          id: 'rev_004',
          user: 'Jennifer L.',
          rating: 5,
          date: '1 day ago',
          comment: 'Love the outdoor setting and amazing beer selection. Food trucks on weekends are a bonus!',
          helpful: 20
        }
      ]
    },
    {
      id: 'venue_004',
      name: 'Jazz Corner',
      type: 'Jazz Club',
      address: '321 Heritage St, Houston, TX 77007',
      rating: 4.8,
      totalRatings: 234,
      crowdLevel: 60,
      waitTime: 5,
      followersCount: 987,
      reports: 12,
      lastUpdate: '8 min ago',
      confidence: 87,
      hasPromotion: false,
      promotionText: '',
      vibe: ['Live Jazz', 'Intimate', 'Classic', 'Wine Bar'],
      phone: '+1-713-555-0126',
      hours: 'Tue-Sun 7PM-1AM',
      reviews: [
        {
          id: 'rev_005',
          user: 'Robert K.',
          rating: 5,
          date: '4 days ago',
          comment: 'Authentic jazz experience with talented local musicians. Intimate setting with excellent acoustics.',
          helpful: 9
        }
      ]
    },
    {
      id: 'venue_005',
      name: 'Sports Bar Central',
      type: 'Sports Bar',
      address: '654 Stadium Dr, Houston, TX 77008',
      rating: 4.1,
      totalRatings: 445,
      crowdLevel: 85,
      waitTime: 20,
      followersCount: 1678,
      reports: 34,
      lastUpdate: '3 min ago',
      confidence: 91,
      hasPromotion: true,
      promotionText: 'Game Day Special: $2 beers during all Texans games!',
      vibe: ['Sports', 'Casual', 'Big Screens', 'Wings'],
      phone: '+1-713-555-0127',
      hours: 'Daily 11AM-2AM',
      reviews: [
        {
          id: 'rev_006',
          user: 'Tom W.',
          rating: 4,
          date: '5 days ago',
          comment: 'Great place to watch the game with friends. Lots of TVs and good bar food.',
          helpful: 6
        }
      ]
    },
    {
      id: 'venue_006',
      name: 'Mixology Lab',
      type: 'Cocktail Lounge',
      address: '987 Innovation Blvd, Houston, TX 77009',
      rating: 4.6,
      totalRatings: 312,
      crowdLevel: 55,
      waitTime: 10,
      followersCount: 2567,
      reports: 18,
      lastUpdate: '6 min ago',
      confidence: 89,
      hasPromotion: false,
      promotionText: '',
      vibe: ['Craft Cocktails', 'Sophisticated', 'Innovation', 'Date Night'],
      phone: '+1-713-555-0128',
      hours: 'Wed-Sat 6PM-2AM',
      reviews: [
        {
          id: 'rev_007',
          user: 'Lisa H.',
          rating: 5,
          date: '2 days ago',
          comment: 'Incredible cocktail creations! Each drink is like a work of art. Definitely worth the premium prices.',
          helpful: 14
        }
      ]
    }
  ]
};

// Action types
const actionTypes = {
  // Authentication actions
  SET_USER: 'SET_USER',
  SET_AUTH: 'SET_AUTH',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGIN_FAILURE: 'LOGIN_FAILURE',
  LOGOUT: 'LOGOUT',
  INIT_AUTH_COMPLETE: 'INIT_AUTH_COMPLETE', // üî• ADD: New action for initialization
  
  // UI State actions
  SET_CURRENT_VIEW: 'SET_CURRENT_VIEW',
  SET_SEARCH_QUERY: 'SET_SEARCH_QUERY',
  SET_LOADING: 'SET_LOADING',
  SET_ERROR: 'SET_ERROR',
  CLEAR_ERROR: 'CLEAR_ERROR',
  
  // User actions
  SET_USER_TYPE: 'SET_USER_TYPE',
  LOGIN_USER: 'LOGIN_USER',
  LOGOUT_USER: 'LOGOUT_USER',
  
  // Venue actions
  SET_SELECTED_VENUE: 'SET_SELECTED_VENUE',
  TOGGLE_VENUE_FOLLOW: 'TOGGLE_VENUE_FOLLOW',
  UPDATE_VENUE_DATA: 'UPDATE_VENUE_DATA',
  
  // Notification actions
  ADD_NOTIFICATION: 'ADD_NOTIFICATION',
  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',
  
  // Modal actions
  SET_SHOW_RATING_MODAL: 'SET_SHOW_RATING_MODAL',
  SET_SHOW_REPORT_MODAL: 'SET_SHOW_REPORT_MODAL',
  SET_SHOW_SHARE_MODAL: 'SET_SHOW_SHARE_MODAL',
  SET_SHOW_USER_PROFILE_MODAL: 'SET_SHOW_USER_PROFILE_MODAL',
  SET_SHARE_VENUE: 'SET_SHARE_VENUE',
  SUBMIT_VENUE_RATING: 'SUBMIT_VENUE_RATING',
  SUBMIT_VENUE_REPORT: 'SUBMIT_VENUE_REPORT',
  
  // Registration actions
  SET_REGISTRATION_STEP: 'SET_REGISTRATION_STEP',
  UPDATE_REGISTRATION_DATA: 'UPDATE_REGISTRATION_DATA',
  CLEAR_REGISTRATION_DATA: 'CLEAR_REGISTRATION_DATA',
  
  // Email verification actions
  SET_VERIFICATION_MESSAGE: 'SET_VERIFICATION_MESSAGE',
  CLEAR_VERIFICATION_MESSAGE: 'CLEAR_VERIFICATION_MESSAGE'
};

// Reducer
function appReducer(state, action) {
  console.log('üîÑ AppReducer:', action.type, action.payload);
  
  switch (action.type) {
    // Authentication cases
    case actionTypes.SET_USER:
      return {
        ...state,
        user: action.payload,
        userProfile: action.payload // Keep backward compatibility
      };
      
    case actionTypes.SET_AUTH:
      return {
        ...state,
        isAuthenticated: action.payload
      };
      
    case actionTypes.LOGIN_SUCCESS:
      console.log('üéØ REDUCER: LOGIN_SUCCESS - setting currentView to home and isAuthenticated to true');
      return {
        ...state,
        user: action.payload.user,
        userProfile: action.payload.user,
        isAuthenticated: true,
        error: null,
        currentView: 'home', // üî• CRITICAL: This should change the view
        isLoading: false
      };
      
    case actionTypes.LOGIN_FAILURE:
      console.log('‚ùå REDUCER: LOGIN_FAILURE');
      return {
        ...state,
        user: null,
        userProfile: null,
        isAuthenticated: false,
        error: action.payload,
        isLoading: false
      };
      
    case actionTypes.LOGOUT:
      console.log('üö™ REDUCER: LOGOUT');
      return {
        ...state,
        user: null,
        userProfile: null,
        isAuthenticated: false,
        userType: null,
        currentView: 'login',
        selectedVenue: null,
        followedVenues: new Set(),
        error: null,
        isLoading: false
      };

    case actionTypes.INIT_AUTH_COMPLETE:
      console.log('üèÅ REDUCER: INIT_AUTH_COMPLETE');
      return {
        ...state,
        isLoading: false,
        currentView: action.payload.isAuthenticated ? 'home' : 'login'
      };
      
    // UI State cases
    case actionTypes.SET_CURRENT_VIEW:
      console.log('üéØ REDUCER: currentView changing from', state.currentView, 'to', action.payload);
      return { ...state, currentView: action.payload };
      
    case actionTypes.SET_SEARCH_QUERY:
      return { ...state, searchQuery: action.payload };
      
    case actionTypes.SET_LOADING:
      return { ...state, isLoading: action.payload };
      
    case actionTypes.SET_ERROR:
      return { ...state, error: action.payload };
      
    case actionTypes.CLEAR_ERROR:
      return { ...state, error: null };
      
    // Legacy user actions (kept for backward compatibility)
    case actionTypes.SET_USER_TYPE:
      return { ...state, userType: action.payload };
      
    case actionTypes.LOGIN_USER:
      console.log('üéØ REDUCER: LOGIN_USER (legacy) - setting home view');
      return {
        ...state,
        isAuthenticated: true,
        userProfile: action.payload,
        user: action.payload,
        currentView: 'home',
        isLoading: false
      };
      
    case actionTypes.LOGOUT_USER:
      authAPI.clearAuth(); // Clear stored auth data
      return {
        ...state,
        isAuthenticated: false,
        userProfile: null,
        user: null,
        userType: null,
        currentView: 'login',
        followedVenues: new Set(),
        isLoading: false
      };
      
    // ... (keep all other cases the same - venue, notifications, modals, etc.)
    case actionTypes.SET_SELECTED_VENUE:
      return { ...state, selectedVenue: action.payload };
      
    case actionTypes.TOGGLE_VENUE_FOLLOW:
      const newFollowedVenues = new Set(state.followedVenues);
      const venueId = action.payload;
      if (newFollowedVenues.has(venueId)) {
        newFollowedVenues.delete(venueId);
      } else {
        newFollowedVenues.add(venueId);
      }
      return {
        ...state,
        followedVenues: newFollowedVenues,
        venues: state.venues.map(venue =>
          venue.id === venueId
            ? {
                ...venue,
                followersCount: newFollowedVenues.has(venueId)
                  ? venue.followersCount + 1
                  : venue.followersCount - 1
              }
            : venue
        )
      };
      
    case actionTypes.UPDATE_VENUE_DATA:
      return {
        ...state,
        venues: state.venues.map(venue => ({
          ...venue,
          crowdLevel: Math.max(0, Math.min(100, venue.crowdLevel + (Math.random() - 0.5) * 20)),
          waitTime: Math.max(0, venue.waitTime + Math.floor((Math.random() - 0.5) * 10)),
          lastUpdate: 'Just now',
          confidence: Math.max(70, Math.min(100, venue.confidence + (Math.random() - 0.5) * 10))
        }))
      };
      
    // Notification cases
    case actionTypes.ADD_NOTIFICATION:
      const newNotification = {
        id: Date.now() + Math.random(),
        timestamp: Date.now(),
        ...action.payload
      };
      return {
        ...state,
        notifications: [newNotification, ...state.notifications.slice(0, 4)]
      };
      
    case actionTypes.REMOVE_NOTIFICATION:
      return {
        ...state,
        notifications: state.notifications.filter(n => n.id !== action.payload)
      };
      
    // Modal cases
    case actionTypes.SET_SHOW_RATING_MODAL:
      return { ...state, showRatingModal: action.payload };
      
    case actionTypes.SET_SHOW_REPORT_MODAL:
      return { ...state, showReportModal: action.payload };
      
    case actionTypes.SET_SHOW_SHARE_MODAL:
      return { ...state, showShareModal: action.payload };
      
    case actionTypes.SET_SHOW_USER_PROFILE_MODAL:
      return { ...state, showUserProfileModal: action.payload };
      
    case actionTypes.SET_SHARE_VENUE:
      return { ...state, shareVenue: action.payload };
      
    case actionTypes.SUBMIT_VENUE_RATING:
      return {
        ...state,
        venues: state.venues.map(venue =>
          venue.id === action.payload.venueId
            ? {
                ...venue,
                rating: ((venue.rating * venue.totalRatings) + action.payload.rating) / (venue.totalRatings + 1),
                totalRatings: venue.totalRatings + 1,
                reviews: [
                  {
                    id: `rev_${Date.now()}`,
                    user: state.userProfile?.firstName + ' ' + (state.userProfile?.lastName?.charAt(0) || '') + '.',
                    rating: action.payload.rating,
                    date: 'Just now',
                    comment: action.payload.comment,
                    helpful: 0
                  },
                  ...venue.reviews
                ]
              }
            : venue
        ),
        showRatingModal: false
      };
      
    case actionTypes.SUBMIT_VENUE_REPORT:
      return {
        ...state,
        venues: state.venues.map(venue =>
          venue.id === action.payload.venueId
            ? {
                ...venue,
                crowdLevel: action.payload.crowdLevel,
                waitTime: action.payload.waitTime,
                lastUpdate: 'Just now',
                confidence: 95,
                reports: venue.reports + 1
              }
            : venue
        ),
        showReportModal: false
      };
      
    // Registration actions
    case actionTypes.SET_REGISTRATION_STEP:
      return { ...state, registrationStep: action.payload };
      
    case actionTypes.UPDATE_REGISTRATION_DATA:
      return {
        ...state,
        registrationData: { ...state.registrationData, ...action.payload }
      };
      
    case actionTypes.CLEAR_REGISTRATION_DATA:
      return {
        ...state,
        registrationData: {},
        registrationStep: 1
      };
      
    // Email verification actions
    case actionTypes.SET_VERIFICATION_MESSAGE:
      return {
        ...state,
        verificationMessage: action.payload
      };
      
    case actionTypes.CLEAR_VERIFICATION_MESSAGE:
      return {
        ...state,
        verificationMessage: {
          show: false,
          email: '',
          type: ''
        }
      };
      
    default:
      return state;
  }
}

// Context Provider
export function AppProvider({ children }) {
  const [state, dispatch] = useReducer(appReducer, initialState);
  
  // üî• FIX: Initialize auth from localStorage on mount
  useEffect(() => {
    const initializeAuth = async () => {
      console.log('üöÄ Initializing authentication...');
      
      try {
        // Check if we have stored auth data
        const storedToken = authAPI.getToken();
        const storedUser = authAPI.getStoredUser();
        
        console.log('Stored token exists:', !!storedToken);
        console.log('Stored user exists:', !!storedUser);
        
        if (storedToken && storedUser) {
          // Validate the stored token
          console.log('üîç Validating stored token...');
          const validation = await authAPI.validateToken();
          
          if (validation.valid) {
            console.log('‚úÖ Token valid - restoring authentication');
            dispatch({
              type: actionTypes.SET_USER,
              payload: validation.user
            });
            dispatch({
              type: actionTypes.SET_AUTH,
              payload: true
            });
            dispatch({
              type: actionTypes.INIT_AUTH_COMPLETE,
              payload: { isAuthenticated: true }
            });
          } else {
            console.log('‚ùå Token invalid - clearing auth');
            authAPI.clearAuth();
            dispatch({
              type: actionTypes.INIT_AUTH_COMPLETE,
              payload: { isAuthenticated: false }
            });
          }
        } else {
          console.log('‚ÑπÔ∏è No stored auth - showing login');
          dispatch({
            type: actionTypes.INIT_AUTH_COMPLETE,
            payload: { isAuthenticated: false }
          });
        }
      } catch (error) {
        console.error('‚ùå Auth initialization error:', error);
        authAPI.clearAuth();
        dispatch({
          type: actionTypes.INIT_AUTH_COMPLETE,
          payload: { isAuthenticated: false }
        });
      }
    };

    initializeAuth();
  }, []);
  
  // Authentication actions
  const setUser = useCallback((user) => {
    dispatch({ type: actionTypes.SET_USER, payload: user });
  }, []);
  
  const setIsAuthenticated = useCallback((isAuth) => {
    dispatch({ type: actionTypes.SET_AUTH, payload: isAuth });
  }, []);
  
  // üî• FIX: Updated login action to work with authAPI
  const login = useCallback(async (credentials, rememberMe = false) => {
    console.log('üîê AppContext: Starting login process...', { rememberMe });
    
    dispatch({ type: actionTypes.SET_LOADING, payload: true });
    
    try {
      const response = await authAPI.login(credentials, rememberMe);
      console.log('üîê AppContext: AuthAPI response:', response);
      
      if (response.success) {
        console.log('‚úÖ AppContext: Login successful, dispatching LOGIN_SUCCESS');
        
        dispatch({ 
          type: actionTypes.LOGIN_SUCCESS, 
          payload: { user: response.data.user } 
        });
        
        // Add success notification
        dispatch({
          type: actionTypes.ADD_NOTIFICATION,
          payload: {
            type: 'success',
            message: `üéâ Welcome back, ${response.data.user.first_name || response.data.user.username}!`,
            duration: 3000
          }
        });
        
        return { success: true };
      } else {
        console.log('‚ùå AppContext: Login failed:', response.message);
        dispatch({ 
          type: actionTypes.LOGIN_FAILURE, 
          payload: response.message || 'Login failed' 
        });
        return { success: false, message: response.message };
      }
    } catch (error) {
      console.error('‚ùå AppContext: Login error:', error);
      const errorMessage = error.message || 'Login failed';
      dispatch({ 
        type: actionTypes.LOGIN_FAILURE, 
        payload: errorMessage 
      });
      return { success: false, message: errorMessage };
    }
  }, []);
  
  const logout = useCallback(async () => {
    dispatch({ type: actionTypes.SET_LOADING, payload: true });
    try {
      await authAPI.logout();
      dispatch({ type: actionTypes.LOGOUT });
      
      // Add logout notification
      dispatch({
        type: actionTypes.ADD_NOTIFICATION,
        payload: {
          type: 'info',
          message: 'You have been logged out successfully.',
          duration: 3000
        }
      });
    } catch (error) {
      console.error('Logout error:', error);
      // Still logout on client side even if API call fails
      dispatch({ type: actionTypes.LOGOUT });
    }
  }, []);
  
  // Action creators
  const actions = {
    // New setView action for navigation
    setView: useCallback((view) => {
      console.log('üéØ AppContext: Setting view to:', view);
      dispatch({ type: actionTypes.SET_CURRENT_VIEW, payload: view });
    }, []),
    
    // Authentication actions
    setUser,
    setIsAuthenticated,
    login,
    logout,
    
    // UI actions
    setCurrentView: useCallback((view) => {
      dispatch({ type: actionTypes.SET_CURRENT_VIEW, payload: view });
    }, []),
    
    setSearchQuery: useCallback((query) => {
      dispatch({ type: actionTypes.SET_SEARCH_QUERY, payload: query });
    }, []),
    
    setLoading: useCallback((loading) => {
      dispatch({ type: actionTypes.SET_LOADING, payload: loading });
    }, []),
    
    setError: useCallback((error) => {
      dispatch({ type: actionTypes.SET_ERROR, payload: error });
    }, []),
    
    clearError: useCallback(() => {
      dispatch({ type: actionTypes.CLEAR_ERROR });
    }, []),
    
    // Legacy user actions (kept for backward compatibility)
    setUserType: useCallback((userType) => {
      dispatch({ type: actionTypes.SET_USER_TYPE, payload: userType });
    }, []),
    
    loginUser: useCallback((userData) => {
      console.log('üéØ AppContext: Legacy loginUser called');
      dispatch({ type: actionTypes.LOGIN_USER, payload: userData });
    }, []),
    
    logoutUser: useCallback(() => {
      dispatch({ type: actionTypes.LOGOUT_USER });
    }, []),
    
    // Venue actions
    setSelectedVenue: useCallback((venue) => {
      dispatch({ type: actionTypes.SET_SELECTED_VENUE, payload: venue });
    }, []),
    
    toggleVenueFollow: useCallback((venueId) => {
      dispatch({ type: actionTypes.TOGGLE_VENUE_FOLLOW, payload: venueId });
    }, []),
    
    updateVenueData: useCallback(() => {
      dispatch({ type: actionTypes.UPDATE_VENUE_DATA });
    }, []),
    
    // Notification actions
    addNotification: useCallback((notification) => {
      const id = Date.now();
      dispatch({ 
        type: actionTypes.ADD_NOTIFICATION, 
        payload: { ...notification, id } 
      });
      
      // Auto-remove notification after duration
      if (notification.duration) {
        setTimeout(() => {
          dispatch({ type: actionTypes.REMOVE_NOTIFICATION, payload: id });
        }, notification.duration);
      }
    }, []),
    
    removeNotification: useCallback((id) => {
      dispatch({ type: actionTypes.REMOVE_NOTIFICATION, payload: id });
    }, []),
    
    // Modal actions
    setShowRatingModal: useCallback((show) => {
      dispatch({ type: actionTypes.SET_SHOW_RATING_MODAL, payload: show });
    }, []),
    
    setShowReportModal: useCallback((show) => {
      dispatch({ type: actionTypes.SET_SHOW_REPORT_MODAL, payload: show });
    }, []),
    
    setShowShareModal: useCallback((show) => {
      dispatch({ type: actionTypes.SET_SHOW_SHARE_MODAL, payload: show });
    }, []),
    
    setShowUserProfileModal: useCallback((show) => {
      dispatch({ type: actionTypes.SET_SHOW_USER_PROFILE_MODAL, payload: show });
    }, []),
    
    setShareVenue: useCallback((venue) => {
      dispatch({ type: actionTypes.SET_SHARE_VENUE, payload: venue });
    }, []),
    
    submitVenueRating: useCallback((venueId, rating, comment) => {
      dispatch({
        type: actionTypes.SUBMIT_VENUE_RATING,
        payload: { venueId, rating, comment }
      });
    }, []),
    
    submitVenueReport: useCallback((venueId, crowdLevel, waitTime) => {
      dispatch({
        type: actionTypes.SUBMIT_VENUE_REPORT,
        payload: { venueId, crowdLevel, waitTime }
      });
    }, []),
    
    // Registration actions
    setRegistrationStep: useCallback((step) => {
      dispatch({ type: actionTypes.SET_REGISTRATION_STEP, payload: step });
    }, []),
    
    updateRegistrationData: useCallback((data) => {
      dispatch({ type: actionTypes.UPDATE_REGISTRATION_DATA, payload: data });
    }, []),
    
    clearRegistrationData: useCallback(() => {
      dispatch({ type: actionTypes.CLEAR_REGISTRATION_DATA });
    }, []),
    
    // Email verification actions
    setVerificationMessage: useCallback((message) => {
      dispatch({ type: actionTypes.SET_VERIFICATION_MESSAGE, payload: message });
    }, []),
    
    clearVerificationMessage: useCallback(() => {
      dispatch({ type: actionTypes.CLEAR_VERIFICATION_MESSAGE });
    }, []),
    
    // Helper action for initialization
    setInitialized: useCallback(() => {
      dispatch({ type: actionTypes.SET_LOADING, payload: false });
    }, [])
  };
  
  // Debug logging
  console.log('üñºÔ∏è AppContext state:', {
    currentView: state.currentView,
    isAuthenticated: state.isAuthenticated,
    isLoading: state.isLoading,
    hasUser: !!state.user
  });
  
  return (
    <AppContext.Provider value={{ state, actions }}>
      {children}
    </AppContext.Provider>
  );
}

// Custom hook to use the context
export function useApp() {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
}

// Export context for testing
export { AppContext };

üîê LOGINVIEW COMPONENT ANALYSIS
===============================
üìÑ src/components/Views/LoginView.jsx.emergency_backup:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister, onForgotPassword }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            {/* NEW: Forgot Password Link */}
            <div className="forgot-password-section">
              <button
                type="button"
                onClick={onForgotPassword}
                className="forgot-password-link"
              >
                Forgot your password?
              </button>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister, onForgotPassword }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false); // üî• ADD: Remember Me state
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log('üöÄ LOGIN FLOW START - Using Context Login Action');
    console.log('üîç LOGIN DIAGNOSTIC - Form submitted with rememberMe:', rememberMe);
    
    setError('');
    setIsLoading(true);

    try {
      // üî• CRITICAL FIX: Use the context login action instead of registrationAPI directly
      console.log('Using context login action...');
      
      const credentials = {
        username: username, // This will be converted to email in authAPI
        password: password
      };

      // Use the context login action that handles persistent login
      const result = await actions.login(credentials, rememberMe);
      
      console.log('Context login result:', result);

      if (result.success) {
        console.log('‚úÖ Login successful via context - should auto-navigate to home');
        // No manual navigation needed - the LOGIN_SUCCESS action should handle this
      } else {
        console.log('‚ùå Login failed:', result.message);
        setError(result.message || 'Login failed. Please try again.');
      }

    } catch (error) {
      console.error('Login error caught:', error);
      
      // Handle different error types
      if (error.message && error.message.includes('email')) {
        setError('Please verify your email before signing in. Check your inbox for the verification link.');
      } else if (error.message && error.message.includes('401')) {
        setError('Invalid username or password.');
      } else if (error.message && error.message.includes('429')) {
        setError('Too many login attempts. Please try again later.');
      } else {
        setError('Login failed. Please check your credentials and try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            {/* üî• ADD: Remember Me Checkbox */}
            <div className="remember-me-section">
              <label className="remember-me-label">
                <input
                  type="checkbox"
                  checked={rememberMe}
                  onChange={(e) => setRememberMe(e.target.checked)}
                  className="remember-me-checkbox"
                />
                <span className="remember-me-text">Remember me for 30 days</span>
              </label>
            </div>

            {/* Forgot Password Link */}
            <div className="forgot-password-section">
              <button
                type="button"
                onClick={onForgotPassword}
                className="forgot-password-link"
              >
                Forgot your password?
              </button>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup-registration-impl:
import React, { useState } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users } from 'lucide-react';

const LoginView = ({ onLogin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const demoCredentials = {
    username: 'demouser',
    password: 'demopass'
  };

  const fillDemoCredentials = () => {
    setUsername(demoCredentials.username);
    setPassword(demoCredentials.password);
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    // Simulate realistic API call delay
    setTimeout(() => {
      if (username === demoCredentials.username && password === demoCredentials.password) {
        onLogin({
          id: 'usr_demo',
          username: username,
          firstName: 'Demo',
          lastName: 'User'
        });
      } else {
        setError('Invalid username or password. Try: demouser / demopass');
      }
      setIsLoading(false);
    }, 1000);
  };

  const features = [
    { icon: Star, text: "Rate and review the hottest venues worldwide" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts globally" },
    { icon: Zap, text: "Discover trending spots in your city and beyond" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          <div className="demo-banner">
            <div className="demo-content">
              <div className="demo-info">
                <h4 className="demo-title">Demo Account Available</h4>
                <p className="demo-description">
                  Try nYtevibe with our demo account. Click below to auto-fill credentials.
                </p>
              </div>
              <button
                type="button"
                onClick={fillDemoCredentials}
                className="demo-fill-button"
              >
                Fill Demo
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Enter nYtevibe
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button className="footer-link">Create Account</button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Nightlife Worldwide</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>
          
          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup.1749348190:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister, onForgotPassword }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            {/* NEW: Forgot Password Link */}
            <div className="forgot-password-section">
              <button
                type="button"
                onClick={onForgotPassword}
                className="forgot-password-link"
              >
                Forgot your password?
              </button>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup-globalize:
import React, { useState } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users } from 'lucide-react';

const LoginView = ({ onLogin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const demoCredentials = {
    username: 'demouser',
    password: 'demopass'
  };

  const fillDemoCredentials = () => {
    setUsername(demoCredentials.username);
    setPassword(demoCredentials.password);
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    // Simulate realistic API call delay
    setTimeout(() => {
      if (username === demoCredentials.username && password === demoCredentials.password) {
        onLogin({
          id: 'usr_demo',
          username: username,
          firstName: 'Demo',
          lastName: 'User'
        });
      } else {
        setError('Invalid username or password. Try: demouser / demopass');
      }
      setIsLoading(false);
    }, 1000);
  };

  const features = [
    { icon: Star, text: "Rate and review Houston's hottest venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Houston's Premier Nightlife Discovery Platform</p>
            </div>
          </div>

          <div className="demo-banner">
            <div className="demo-content">
              <div className="demo-info">
                <h4 className="demo-title">Demo Account Available</h4>
                <p className="demo-description">
                  Try nYtevibe with our demo account. Click below to auto-fill credentials.
                </p>
              </div>
              <button
                type="button"
                onClick={fillDemoCredentials}
                className="demo-fill-button"
              >
                Fill Demo
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Enter nYtevibe
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button className="footer-link">Create Account</button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Houston's Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>
          
          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">50+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">1K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">5K+</span>
              <span className="stat-label">Reviews</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup-remove-landing:
import React, { useState } from 'react';
import { ArrowLeft, Eye, EyeOff, User, Lock, Zap, Star, Clock, Users } from 'lucide-react';

const LoginView = ({ onBack, onLogin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const demoCredentials = {
    username: 'demouser',
    password: 'demopass'
  };

  const fillDemoCredentials = () => {
    setUsername(demoCredentials.username);
    setPassword(demoCredentials.password);
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    // Simulate realistic API call delay
    setTimeout(() => {
      if (username === demoCredentials.username && password === demoCredentials.password) {
        onLogin({
          id: 'usr_demo',
          username: username,
          firstName: 'Demo',
          lastName: 'User'
        });
      } else {
        setError('Invalid username or password. Try: demouser / demopass');
      }
      setIsLoading(false);
    }, 1000);
  };

  const features = [
    { icon: Star, text: "Rate and review Houston's hottest venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      
      <div className="login-container">
        <div className="login-header">
          <button onClick={onBack} className="back-button">
            <ArrowLeft className="w-4 h-4" />
            Back to Landing
          </button>
        </div>

        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome Back</h2>
              <p className="login-subtitle">Sign in to discover Houston's nightlife</p>
            </div>
          </div>

          <div className="demo-banner">
            <div className="demo-content">
              <div className="demo-info">
                <h4 className="demo-title">Demo Account Available</h4>
                <p className="demo-description">
                  Try nYtevibe with our demo account. Click below to auto-fill credentials.
                </p>
              </div>
              <button
                type="button"
                onClick={fillDemoCredentials}
                className="demo-fill-button"
              >
                Fill Demo
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button className="footer-link">Create Account</button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">What you'll get:</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup_verification:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister }) => {
const { state, actions } = useApp();
const [username, setUsername] = useState('');
const [password, setPassword] = useState('');
const [showPassword, setShowPassword] = useState(false);
const [error, setError] = useState('');
const [isLoading, setIsLoading] = useState(false);
const [canResendVerification, setCanResendVerification] = useState(true);
const [resendCooldown, setResendCooldown] = useState(0);

const demoCredentials = {
username: 'demouser',
password: 'demopass'
};

// Handle verification message from registration
const verificationMessage = state.verificationMessage;

useEffect(() => {
if (resendCooldown > 0) {
const timer = setTimeout(() => {
setResendCooldown(resendCooldown - 1);
}, 1000);
return () => clearTimeout(timer);
} else if (resendCooldown === 0 && !canResendVerification) {
setCanResendVerification(true);
}
}, [resendCooldown, canResendVerification]);

// Clear verification message when component unmounts or user starts typing
useEffect(() => {
if ((username || password) && verificationMessage?.show) {
actions.clearVerificationMessage();
}
}, [username, password, verificationMessage, actions]);

const fillDemoCredentials = () => {
setUsername(demoCredentials.username);
setPassword(demoCredentials.password);
setError('');
};

const handleSubmit = async (e) => {
e.preventDefault();
setError('');
setIsLoading(true);

try {
// Check if demo credentials
if (username === demoCredentials.username && password === demoCredentials.password) {
// Demo login (unchanged)
setTimeout(() => {
actions.loginUser({
id: 'usr_demo',
username: username,
firstName: 'Demo',
lastName: 'User',
email: 'demo@nytevibe.com',
level: 5,
points: 1250,
user_type: 'user',
email_verified: true
});

actions.addNotification({
type: 'success',
message: `üéâ Welcome back, Demo!`,
important: true,
duration: 3000
});
setIsLoading(false);
}, 1000);
return;
}

// Real API login
const response = await registrationAPI.login({
email: username,
password
});

if (response.status === 'success') {
// Check if email is verified
if (!response.data.user.email_verified) {
setError('Please verify your email before signing in. Check your inbox for the verification link.');
setIsLoading(false);
return;
}

// Store authentication token
localStorage.setItem('auth_token', response.data.token);

// Login user
actions.loginUser(response.data.user);

actions.addNotification({
type: 'success',
message: `üéâ Welcome back, ${response.data.user.first_name}!`,
important: true,
duration: 3000
});
}
} catch (error) {
console.error('Login failed:', error);
if (error instanceof APIError) {
if (error.status === 401) {
setError('Invalid username or password.');
} else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
setError('Please verify your email before signing in. Check your inbox for the verification link.');
} else if (error.status === 429) {
setError('Too many login attempts. Please try again later.');
} else {
setError('Login failed. Please try again.');
}
} else {
setError('Network error. Please check your connection.');
}
} finally {
setIsLoading(false);
}
};

const handleResendVerification = async () => {
if (!canResendVerification || !verificationMessage?.email) return;

setCanResendVerification(false);
setResendCooldown(60);

try {
await registrationAPI.resendVerificationEmail(verificationMessage.email);
actions.addNotification({
type: 'success',
message: 'üìß Verification email sent! Check your inbox.',
duration: 4000
});
} catch (error) {
console.error('Resend verification failed:', error);
actions.addNotification({
type: 'error',
message: 'Failed to resend email. Please try again later.',
duration: 4000
});
setCanResendVerification(true);
setResendCooldown(0);
}
};

const features = [
{ icon: Star, text: "Rate and review nightlife venues" },
{ icon: Clock, text: "Get real-time crowd levels and wait times" },
{ icon: Users, text: "Connect with fellow nightlife enthusiasts" },
{ icon: Zap, text: "Discover trending spots before they blow up" }
];

return (
<div className="login-page">
<div className="login-background">
<div className="login-gradient"></div>
</div>
<div className="login-container">
<div className="login-card">
<div className="login-card-header">
<div className="login-logo">
<div className="logo-icon">
<Zap className="w-10 h-10 text-white" />
</div>
<h2 className="login-title">Welcome to nYtevibe</h2>
<p className="login-subtitle">Global Nightlife Discovery Platform</p>
</div>
</div>

{/* Email Verification Banner */}
{verificationMessage?.show && (
<div className="verification-banner">
<div className="verification-content">
<div className="verification-icon">
<Mail className="w-6 h-6 text-blue-500" />
</div>
<div className="verification-text">
<h4 className="verification-title">Check Your Email</h4>
<p className="verification-description">
We sent a verification link to <strong>{verificationMessage.email}</strong>. 
Click the link to activate your account.
</p>
</div>
</div>
{verificationMessage.email && (
<button
onClick={handleResendVerification}
disabled={!canResendVerification}
className="resend-button"
>
{canResendVerification ? (
<>
<RefreshCw className="w-4 h-4" />
Resend
</>
) : (
`${resendCooldown}s`
)}
</button>
)}
</div>
)}

<div className="demo-banner">
<div className="demo-content">
<div className="demo-info">
<h4 className="demo-title">Demo Account Available</h4>
<p className="demo-description">
Try nYtevibe with our demo account. Click below to auto-fill credentials.
</p>
</div>
<button
type="button"
onClick={fillDemoCredentials}
className="demo-fill-button"
>
Fill Demo
</button>
</div>
</div>

<form onSubmit={handleSubmit} className="login-form">
{error && (
<div className="error-banner">
<span className="error-icon">‚ö†Ô∏è</span>
<span className="error-text">{error}</span>
</div>
)}

<div className="form-group">
<label htmlFor="username" className="form-label">Username</label>
<div className="input-wrapper">
<User className="input-icon" />
<input
id="username"
type="text"
value={username}
onChange={(e) => setUsername(e.target.value)}
className="form-input"
placeholder="Enter your username"
required
/>
</div>
</div>

<div className="form-group">
<label htmlFor="password" className="form-label">Password</label>
<div className="input-wrapper">
<Lock className="input-icon" />
<input
id="password"
type={showPassword ? 'text' : 'password'}
value={password}
onChange={(e) => setPassword(e.target.value)}
className="form-input"
placeholder="Enter your password"
required
/>
<button
type="button"
onClick={() => setShowPassword(!showPassword)}
className="password-toggle"
>
{showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
</button>
</div>
</div>

<button
type="submit"
disabled={isLoading}
className={`login-button ${isLoading ? 'loading' : ''}`}
>
{isLoading ? (
<>
<div className="loading-spinner"></div>
Signing In...
</>
) : (
<>
<User className="w-4 h-4" />
Sign In
</>
)}
</button>
</form>

<div className="login-card-footer">
<p className="footer-text">
New to nYtevibe?{' '}
<button
className="footer-link"
onClick={onRegister}
type="button"
>
Create Account
</button>
</p>
</div>
</div>

<div className="login-features">
<h3 className="features-title">Discover Global Nightlife</h3>
<ul className="features-list">
{features.map((feature, index) => (
<li key={index} className="feature-item">
<feature.icon className="w-4 h-4 text-blue-400" />
<span>{feature.text}</span>
</li>
))}
</ul>

<div className="platform-stats">
<div className="stat-highlight">
<span className="stat-number">10K+</span>
<span className="stat-label">Venues</span>
</div>
<div className="stat-highlight">
<span className="stat-number">50K+</span>
<span className="stat-label">Users</span>
</div>
<div className="stat-highlight">
<span className="stat-number">200+</span>
<span className="stat-label">Cities</span>
</div>
</div>
</div>
</div>
</div>
);
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.super_safe_backup:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister, onForgotPassword }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            {/* NEW: Forgot Password Link */}
            <div className="forgot-password-section">
              <button
                type="button"
                onClick={onForgotPassword}
                className="forgot-password-link"
              >
                Forgot your password?
              </button>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup-demo:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  const demoCredentials = {
    username: 'demouser',
    password: 'demopass'
  };

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const fillDemoCredentials = () => {
    setUsername(demoCredentials.username);
    setPassword(demoCredentials.password);
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Check if demo credentials
      if (username === demoCredentials.username && password === demoCredentials.password) {
        // Demo login (unchanged)
        setTimeout(() => {
          const demoUser = {
            id: 'usr_demo',
            username: username,
            firstName: 'Demo',
            lastName: 'User',
            email: 'demo@nytevibe.com',
            level: 5,
            points: 1250,
            user_type: 'user',
            email_verified: true
          };

          // Store demo user data properly
          localStorage.setItem('user', JSON.stringify(demoUser));
          localStorage.setItem('auth_token', 'demo_token_12345');

          actions.loginUser(demoUser);

          actions.addNotification({
            type: 'success',
            message: `üéâ Welcome back, Demo!`,
            important: true,
            duration: 3000
          });
          setIsLoading(false);
        }, 1000);
        return;
      }

      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <div className="demo-banner">
            <div className="demo-content">
              <div className="demo-info">
                <h4 className="demo-title">Demo Account Available</h4>
                <p className="demo-description">
                  Try nYtevibe with our demo account. Click below to auto-fill credentials.
                </p>
              </div>
              <button
                type="button"
                onClick={fillDemoCredentials}
                className="demo-fill-button"
              >
                Fill Demo
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup-20250604-213107:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.step_backup:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister, onForgotPassword }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            {/* NEW: Forgot Password Link */}
            <div className="forgot-password-section">
              <button
                type="button"
                onClick={onForgotPassword}
                className="forgot-password-link"
              >
                Forgot your password?
              </button>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.backup-email-verification:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister }) => {
const { state, actions } = useApp();
const [username, setUsername] = useState('');
const [password, setPassword] = useState('');
const [showPassword, setShowPassword] = useState(false);
const [error, setError] = useState('');
const [isLoading, setIsLoading] = useState(false);
const [canResendVerification, setCanResendVerification] = useState(true);
const [resendCooldown, setResendCooldown] = useState(0);

const demoCredentials = {
username: 'demouser',
password: 'demopass'
};

// Handle verification message from registration
const verificationMessage = state.verificationMessage;

useEffect(() => {
if (resendCooldown > 0) {
const timer = setTimeout(() => {
setResendCooldown(resendCooldown - 1);
}, 1000);
return () => clearTimeout(timer);
} else if (resendCooldown === 0 && !canResendVerification) {
setCanResendVerification(true);
}
}, [resendCooldown, canResendVerification]);

// Clear verification message when component unmounts or user starts typing
useEffect(() => {
if ((username || password) && verificationMessage?.show) {
actions.clearVerificationMessage();
}
}, [username, password, verificationMessage, actions]);

const fillDemoCredentials = () => {
setUsername(demoCredentials.username);
setPassword(demoCredentials.password);
setError('');
};

const handleSubmit = async (e) => {
e.preventDefault();
setError('');
setIsLoading(true);

try {
// Check if demo credentials
if (username === demoCredentials.username && password === demoCredentials.password) {
// Demo login (unchanged)
setTimeout(() => {
actions.loginUser({
id: 'usr_demo',
username: username,
firstName: 'Demo',
lastName: 'User',
email: 'demo@nytevibe.com',
level: 5,
points: 1250,
user_type: 'user',
email_verified: true
});

actions.addNotification({
type: 'success',
message: `üéâ Welcome back, Demo!`,
important: true,
duration: 3000
});
setIsLoading(false);
}, 1000);
return;
}

// Real API login
const response = await registrationAPI.login({
username,
password
});

if (response.status === 'success') {
// Check if email is verified
if (!response.data.user.email_verified) {
setError('Please verify your email before signing in. Check your inbox for the verification link.');
setIsLoading(false);
return;
}

// Store authentication token
localStorage.setItem('auth_token', response.data.token);

// Login user
actions.loginUser(response.data.user);

actions.addNotification({
type: 'success',
message: `üéâ Welcome back, ${response.data.user.first_name}!`,
important: true,
duration: 3000
});
}
} catch (error) {
console.error('Login failed:', error);
if (error instanceof APIError) {
if (error.status === 401) {
setError('Invalid username or password.');
} else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
setError('Please verify your email before signing in. Check your inbox for the verification link.');
} else if (error.status === 429) {
setError('Too many login attempts. Please try again later.');
} else {
setError('Login failed. Please try again.');
}
} else {
setError('Network error. Please check your connection.');
}
} finally {
setIsLoading(false);
}
};

const handleResendVerification = async () => {
if (!canResendVerification || !verificationMessage?.email) return;

setCanResendVerification(false);
setResendCooldown(60);

try {
await registrationAPI.resendVerificationEmail(verificationMessage.email);
actions.addNotification({
type: 'success',
message: 'üìß Verification email sent! Check your inbox.',
duration: 4000
});
} catch (error) {
console.error('Resend verification failed:', error);
actions.addNotification({
type: 'error',
message: 'Failed to resend email. Please try again later.',
duration: 4000
});
setCanResendVerification(true);
setResendCooldown(0);
}
};

const features = [
{ icon: Star, text: "Rate and review nightlife venues" },
{ icon: Clock, text: "Get real-time crowd levels and wait times" },
{ icon: Users, text: "Connect with fellow nightlife enthusiasts" },
{ icon: Zap, text: "Discover trending spots before they blow up" }
];

return (
<div className="login-page">
<div className="login-background">
<div className="login-gradient"></div>
</div>
<div className="login-container">
<div className="login-card">
<div className="login-card-header">
<div className="login-logo">
<div className="logo-icon">
<Zap className="w-10 h-10 text-white" />
</div>
<h2 className="login-title">Welcome to nYtevibe</h2>
<p className="login-subtitle">Global Nightlife Discovery Platform</p>
</div>
</div>

{/* Email Verification Banner */}
{verificationMessage?.show && (
<div className="verification-banner">
<div className="verification-content">
<div className="verification-icon">
<Mail className="w-6 h-6 text-blue-500" />
</div>
<div className="verification-text">
<h4 className="verification-title">Check Your Email</h4>
<p className="verification-description">
We sent a verification link to <strong>{verificationMessage.email}</strong>. 
Click the link to activate your account.
</p>
</div>
</div>
{verificationMessage.email && (
<button
onClick={handleResendVerification}
disabled={!canResendVerification}
className="resend-button"
>
{canResendVerification ? (
<>
<RefreshCw className="w-4 h-4" />
Resend
</>
) : (
`${resendCooldown}s`
)}
</button>
)}
</div>
)}

<div className="demo-banner">
<div className="demo-content">
<div className="demo-info">
<h4 className="demo-title">Demo Account Available</h4>
<p className="demo-description">
Try nYtevibe with our demo account. Click below to auto-fill credentials.
</p>
</div>
<button
type="button"
onClick={fillDemoCredentials}
className="demo-fill-button"
>
Fill Demo
</button>
</div>
</div>

<form onSubmit={handleSubmit} className="login-form">
{error && (
<div className="error-banner">
<span className="error-icon">‚ö†Ô∏è</span>
<span className="error-text">{error}</span>
</div>
)}

<div className="form-group">
<label htmlFor="username" className="form-label">Username</label>
<div className="input-wrapper">
<User className="input-icon" />
<input
id="username"
type="text"
value={username}
onChange={(e) => setUsername(e.target.value)}
className="form-input"
placeholder="Enter your username"
required
/>
</div>
</div>

<div className="form-group">
<label htmlFor="password" className="form-label">Password</label>
<div className="input-wrapper">
<Lock className="input-icon" />
<input
id="password"
type={showPassword ? 'text' : 'password'}
value={password}
onChange={(e) => setPassword(e.target.value)}
className="form-input"
placeholder="Enter your password"
required
/>
<button
type="button"
onClick={() => setShowPassword(!showPassword)}
className="password-toggle"
>
{showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
</button>
</div>
</div>

<button
type="submit"
disabled={isLoading}
className={`login-button ${isLoading ? 'loading' : ''}`}
>
{isLoading ? (
<>
<div className="loading-spinner"></div>
Signing In...
</>
) : (
<>
<User className="w-4 h-4" />
Sign In
</>
)}
</button>
</form>

<div className="login-card-footer">
<p className="footer-text">
New to nYtevibe?{' '}
<button
className="footer-link"
onClick={onRegister}
type="button"
>
Create Account
</button>
</p>
</div>
</div>

<div className="login-features">
<h3 className="features-title">Discover Global Nightlife</h3>
<ul className="features-list">
{features.map((feature, index) => (
<li key={index} className="feature-item">
<feature.icon className="w-4 h-4 text-blue-400" />
<span>{feature.text}</span>
</li>
))}
</ul>

<div className="platform-stats">
<div className="stat-highlight">
<span className="stat-number">10K+</span>
<span className="stat-label">Venues</span>
</div>
<div className="stat-highlight">
<span className="stat-number">50K+</span>
<span className="stat-label">Users</span>
</div>
<div className="stat-highlight">
<span className="stat-number">200+</span>
<span className="stat-label">Cities</span>
</div>
</div>
</div>
</div>
</div>
);
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx.tmp:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister }) => {
const { state, actions } = useApp();
const [username, setUsername] = useState('');
const [password, setPassword] = useState('');
const [showPassword, setShowPassword] = useState(false);
const [error, setError] = useState('');
const [isLoading, setIsLoading] = useState(false);
const [canResendVerification, setCanResendVerification] = useState(true);
const [resendCooldown, setResendCooldown] = useState(0);

const demoCredentials = {
username: 'demouser',
password: 'demopass'
};

// Handle verification message from registration
const verificationMessage = state.verificationMessage;

useEffect(() => {
if (resendCooldown > 0) {
const timer = setTimeout(() => {
setResendCooldown(resendCooldown - 1);
}, 1000);
return () => clearTimeout(timer);
} else if (resendCooldown === 0 && !canResendVerification) {
setCanResendVerification(true);
}
}, [resendCooldown, canResendVerification]);

// Clear verification message when component unmounts or user starts typing
useEffect(() => {
if ((username || password) && verificationMessage?.show) {
actions.clearVerificationMessage();
}
}, [username, password, verificationMessage, actions]);

const fillDemoCredentials = () => {
setUsername(demoCredentials.username);
setPassword(demoCredentials.password);
setError('');
};

const handleSubmit = async (e) => {
e.preventDefault();
setError('');
setIsLoading(true);

try {
// Check if demo credentials
if (username === demoCredentials.username && password === demoCredentials.password) {
// Demo login (unchanged)
setTimeout(() => {
actions.loginUser({
id: 'usr_demo',
username: username,
firstName: 'Demo',
lastName: 'User',
email: 'demo@nytevibe.com',
level: 5,
points: 1250,
user_type: 'user',
email_verified: true
});

actions.addNotification({
type: 'success',
message: `üéâ Welcome back, Demo!`,
important: true,
duration: 3000
});
setIsLoading(false);
}, 1000);
return;
}

// Real API login
const response = await registrationAPI.login({
username,
password
});

if (response.status === 'success') {
// Check if email is verified
if (!response.data.user.email_verified) {
setError('Please verify your email before signing in. Check your inbox for the verification link.');
setIsLoading(false);
return;
}

// Store authentication token
localStorage.setItem('auth_token', response.data.token);

// Login user
actions.loginUser(response.data.user);

actions.addNotification({
type: 'success',
message: `üéâ Welcome back, ${response.data.user.first_name}!`,
important: true,
duration: 3000
});
}
} catch (error) {
console.error('Login failed:', error);
if (error instanceof APIError) {
if (error.status === 401) {
setError('Invalid username or password.');
} else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
setError('Please verify your email before signing in. Check your inbox for the verification link.');
} else if (error.status === 429) {
setError('Too many login attempts. Please try again later.');
} else {
setError('Login failed. Please try again.');
}
} else {
setError('Network error. Please check your connection.');
}
} finally {
setIsLoading(false);
}
};

const handleResendVerification = async () => {
if (!canResendVerification || !verificationMessage?.email) return;

setCanResendVerification(false);
setResendCooldown(60);

try {
await registrationAPI.resendVerificationEmail(verificationMessage.email);
actions.addNotification({
type: 'success',
message: 'üìß Verification email sent! Check your inbox.',
duration: 4000
});
} catch (error) {
console.error('Resend verification failed:', error);
actions.addNotification({
type: 'error',
message: 'Failed to resend email. Please try again later.',
duration: 4000
});
setCanResendVerification(true);
setResendCooldown(0);
}
};

const features = [
{ icon: Star, text: "Rate and review nightlife venues" },
{ icon: Clock, text: "Get real-time crowd levels and wait times" },
{ icon: Users, text: "Connect with fellow nightlife enthusiasts" },
{ icon: Zap, text: "Discover trending spots before they blow up" }
];

return (
<div className="login-page">
<div className="login-background">
<div className="login-gradient"></div>
</div>
<div className="login-container">
<div className="login-card">
<div className="login-card-header">
<div className="login-logo">
<div className="logo-icon">
<Zap className="w-10 h-10 text-white" />
</div>
<h2 className="login-title">Welcome to nYtevibe</h2>
<p className="login-subtitle">Global Nightlife Discovery Platform</p>
</div>
</div>

{/* Email Verification Banner */}
{verificationMessage?.show && (
<div className="verification-banner">
<div className="verification-content">
<div className="verification-icon">
<Mail className="w-6 h-6 text-blue-500" />
</div>
<div className="verification-text">
<h4 className="verification-title">Check Your Email</h4>
<p className="verification-description">
We sent a verification link to <strong>{verificationMessage.email}</strong>. 
Click the link to activate your account.
</p>
</div>
</div>
{verificationMessage.email && (
<button
onClick={handleResendVerification}
disabled={!canResendVerification}
className="resend-button"
>
{canResendVerification ? (
<>
<RefreshCw className="w-4 h-4" />
Resend
</>
) : (
`${resendCooldown}s`
)}
</button>
)}
</div>
)}

<div className="demo-banner">
<div className="demo-content">
<div className="demo-info">
<h4 className="demo-title">Demo Account Available</h4>
<p className="demo-description">
Try nYtevibe with our demo account. Click below to auto-fill credentials.
</p>
</div>
<button
type="button"
onClick={fillDemoCredentials}
className="demo-fill-button"
>
Fill Demo
</button>
</div>
</div>

<form onSubmit={handleSubmit} className="login-form">
{error && (
<div className="error-banner">
<span className="error-icon">‚ö†Ô∏è</span>
<span className="error-text">{error}</span>
</div>
)}

<div className="form-group">
<label htmlFor="username" className="form-label">Username</label>
<div className="input-wrapper">
<User className="input-icon" />
<input
id="username"
type="text"
value={username}
onChange={(e) => setUsername(e.target.value)}
className="form-input"
placeholder="Enter your username"
required
/>
</div>
</div>

<div className="form-group">
<label htmlFor="password" className="form-label">Password</label>
<div className="input-wrapper">
<Lock className="input-icon" />
<input
id="password"
type={showPassword ? 'text' : 'password'}
value={password}
onChange={(e) => setPassword(e.target.value)}
className="form-input"
placeholder="Enter your password"
required
/>
<button
type="button"
onClick={() => setShowPassword(!showPassword)}
className="password-toggle"
>
{showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
</button>
</div>
</div>

<button
type="submit"
disabled={isLoading}
className={`login-button ${isLoading ? 'loading' : ''}`}
>
{isLoading ? (
<>
<div className="loading-spinner"></div>
Signing In...
</>
) : (
<>
<User className="w-4 h-4" />
Sign In
</>
)}
</button>
</form>

<div className="login-card-footer">
<p className="footer-text">
New to nYtevibe?{' '}
<button
className="footer-link"
onClick={onRegister}
type="button"
>
Create Account
</button>
</p>
</div>
</div>

<div className="login-features">
<h3 className="features-title">Discover Global Nightlife</h3>
<ul className="features-list">
{features.map((feature, index) => (
<li key={index} className="feature-item">
<feature.icon className="w-4 h-4 text-blue-400" />
<span>{feature.text}</span>
</li>
))}
</ul>

<div className="platform-stats">
<div className="stat-highlight">
<span className="stat-number">10K+</span>
<span className="stat-label">Venues</span>
</div>
<div className="stat-highlight">
<span className="stat-number">50K+</span>
<span className="stat-label">Users</span>
</div>
<div className="stat-highlight">
<span className="stat-number">200+</span>
<span className="stat-label">Cities</span>
</div>
</div>
</div>
</div>
</div>
);
};

export default LoginView;

----------------------------------------
üìÑ src/components/Views/LoginView.jsx-backup:
import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, User, Lock, Zap, Star, Clock, Users, MapPin, Mail, RefreshCw } from 'lucide-react';
import { useApp } from '../../context/AppContext';
import registrationAPI, { APIError } from '../../services/registrationAPI';

const LoginView = ({ onRegister, onForgotPassword }) => {
  const { state, actions } = useApp();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [canResendVerification, setCanResendVerification] = useState(true);
  const [resendCooldown, setResendCooldown] = useState(0);

  // Handle verification message from registration
  const verificationMessage = state.verificationMessage;

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (resendCooldown === 0 && !canResendVerification) {
      setCanResendVerification(true);
    }
  }, [resendCooldown, canResendVerification]);

  // Clear verification message when component unmounts or user starts typing
  useEffect(() => {
    if ((username || password) && verificationMessage?.show) {
      actions.clearVerificationMessage();
    }
  }, [username, password, verificationMessage, actions]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Real API login
      console.log('=== LOGIN DEBUG ===');
      console.log('Attempting login for:', username);

      const response = await registrationAPI.login({
        email: username, // Fixed: API expects 'email' field
        password
      });

      console.log('Login API response:', response);

      if (response.status === 'success') {
        // Check if email is verified - FIXED FIELD NAME
        if (!response.data.user.email_verified_at) {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
          setIsLoading(false);
          return;
        }

        console.log('User data from API:', response.data.user);
        console.log('Token from API:', response.data.token);

        // Store authentication token
        localStorage.setItem('auth_token', response.data.token);

        // FIXED: Store user data properly in localStorage
        const userData = response.data.user;
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('Stored in localStorage:');
        console.log('- auth_token:', localStorage.getItem('auth_token'));
        console.log('- user:', localStorage.getItem('user'));

        // Login user in context
        actions.loginUser(userData);

        // Show success notification
        actions.addNotification({
          type: 'success',
          message: `üéâ Welcome back, ${userData.first_name || userData.username}!`,
          important: true,
          duration: 3000
        });

        console.log('Login successful - redirecting to home');
      }
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof APIError) {
        if (error.status === 401) {
          setError('Invalid username or password.');
        } else if (error.status === 403 && error.code === 'EMAIL_NOT_VERIFIED') {
          setError('Please verify your email before signing in. Check your inbox for the verification link.');
        } else if (error.status === 429) {
          setError('Too many login attempts. Please try again later.');
        } else {
          setError('Login failed. Please try again.');
        }
      } else {
        setError('Network error. Please check your connection.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!canResendVerification || !verificationMessage?.email) return;

    setCanResendVerification(false);
    setResendCooldown(60);

    try {
      await registrationAPI.resendVerificationEmail(verificationMessage.email);
      actions.addNotification({
        type: 'success',
        message: 'üìß Verification email sent! Check your inbox.',
        duration: 4000
      });
    } catch (error) {
      console.error('Resend verification failed:', error);
      actions.addNotification({
        type: 'error',
        message: 'Failed to resend email. Please try again later.',
        duration: 4000
      });
      setCanResendVerification(true);
      setResendCooldown(0);
    }
  };

  const features = [
    { icon: Star, text: "Rate and review nightlife venues" },
    { icon: Clock, text: "Get real-time crowd levels and wait times" },
    { icon: Users, text: "Connect with fellow nightlife enthusiasts" },
    { icon: Zap, text: "Discover trending spots before they blow up" }
  ];

  return (
    <div className="login-page">
      <div className="login-background">
        <div className="login-gradient"></div>
      </div>
      <div className="login-container">
        <div className="login-card">
          <div className="login-card-header">
            <div className="login-logo">
              <div className="logo-icon">
                <Zap className="w-10 h-10 text-white" />
              </div>
              <h2 className="login-title">Welcome to nYtevibe</h2>
              <p className="login-subtitle">Global Nightlife Discovery Platform</p>
            </div>
          </div>

          {/* Email Verification Banner */}
          {verificationMessage?.show && (
            <div className="verification-banner">
              <div className="verification-content">
                <div className="verification-icon">
                  <Mail className="w-6 h-6 text-blue-500" />
                </div>
                <div className="verification-text">
                  <h4 className="verification-title">Check Your Email</h4>
                  <p className="verification-description">
                    We sent a verification link to <strong>{verificationMessage.email}</strong>. 
                    Click the link to activate your account.
                  </p>
                </div>
              </div>
              {verificationMessage.email && (
                <button
                  onClick={handleResendVerification}
                  disabled={!canResendVerification}
                  className="resend-button"
                >
                  {canResendVerification ? (
                    <>
                      <RefreshCw className="w-4 h-4" />
                      Resend
                    </>
                  ) : (
                    `${resendCooldown}s`
                  )}
                </button>
              )}
            </div>
          )}

          <form onSubmit={handleSubmit} className="login-form">
            {error && (
              <div className="error-banner">
                <span className="error-icon">‚ö†Ô∏è</span>
                <span className="error-text">{error}</span>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="username" className="form-label">Username</label>
              <div className="input-wrapper">
                <User className="input-icon" />
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="form-input"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">Password</label>
              <div className="input-wrapper">
                <Lock className="input-icon" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="form-input"
                  placeholder="Enter your password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className={`login-button ${isLoading ? 'loading' : ''}`}
            >
              {isLoading ? (
                <>
                  <div className="loading-spinner"></div>
                  Signing In...
                </>
              ) : (
                <>
                  <User className="w-4 h-4" />
                  Sign In
                </>
              )}
            </button>
          </form>

          <div className="login-card-footer">
            <p className="footer-text">
              New to nYtevibe?{' '}
              <button
                className="footer-link"
                onClick={onRegister}
                type="button"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>

        <div className="login-features">
          <h3 className="features-title">Discover Global Nightlife</h3>
          <ul className="features-list">
            {features.map((feature, index) => (
              <li key={index} className="feature-item">
                <feature.icon className="w-4 h-4 text-blue-400" />
                <span>{feature.text}</span>
              </li>
            ))}
          </ul>

          <div className="platform-stats">
            <div className="stat-highlight">
              <span className="stat-number">10K+</span>
              <span className="stat-label">Venues</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">50K+</span>
              <span className="stat-label">Users</span>
            </div>
            <div className="stat-highlight">
              <span className="stat-number">200+</span>
              <span className="stat-label">Cities</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginView;

----------------------------------------
üìÑ src/components/auth/LoginTest.jsx:
import React, { useState } from 'react';

const LoginTest = () => {
  const [testResult, setTestResult] = useState('');
  const [loading, setLoading] = useState(false);

  const runTest = async () => {
    setLoading(true);
    setTestResult('Testing...');

    try {
      console.log('=== RUNNING LOGIN TEST ===');
      
      const testData = {
        email: 'iammrpwinner01@gmail.com',
        password: 'Scario@02'
      };

      console.log('Test data:', testData);

      const response = await fetch('https://system.nytevibe.com/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(testData)
      });

      const data = await response.json();
      
      console.log('Test response status:', response.status);
      console.log('Test response data:', data);

      if (response.ok) {
        setTestResult(`‚úÖ SUCCESS (${response.status}): ${JSON.stringify(data, null, 2)}`);
      } else {
        setTestResult(`‚ùå FAILED (${response.status}): ${JSON.stringify(data, null, 2)}`);
      }
    } catch (error) {
      console.error('Test error:', error);
      setTestResult(`üí• ERROR: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const testCurl = () => {
    const curlCommand = `curl -X POST https://system.nytevibe.com/api/auth/login \\
  -H "Content-Type: application/json" \\
  -H "Accept: application/json" \\
  -d '{"email":"iammrpwinner01@gmail.com","password":"Scario@02"}'`;
    
    console.log('Equivalent curl command:');
    console.log(curlCommand);
    alert('Curl command logged to console');
  };

  return (
    <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>
      <h2>üîß Login API Test</h2>
      <p>Use this to test the login API directly and compare with your working curl command.</p>
      
      <div style={{ marginBottom: '20px' }}>
        <button 
          onClick={runTest} 
          disabled={loading}
          style={{ 
            padding: '10px 20px', 
            marginRight: '10px',
            backgroundColor: '#007bff', 
            color: 'white', 
            border: 'none', 
            borderRadius: '4px',
            cursor: loading ? 'not-allowed' : 'pointer'
          }}
        >
          {loading ? 'Testing...' : 'üß™ Run Login Test'}
        </button>
        
        <button 
          onClick={testCurl}
          style={{ 
            padding: '10px 20px', 
            backgroundColor: '#28a745', 
            color: 'white', 
            border: 'none', 
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          üìã Show Curl Command
        </button>
      </div>

      {testResult && (
        <div style={{ 
          padding: '15px', 
          backgroundColor: '#f8f9fa', 
          border: '1px solid #dee2e6', 
          borderRadius: '4px',
          fontFamily: 'monospace',
          whiteSpace: 'pre-wrap',
          overflow: 'auto'
        }}>
          <strong>Test Result:</strong><br/>
          {testResult}
        </div>
      )}

      <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>
        <strong>Instructions:</strong>
        <ol>
          <li>Click "Run Login Test" to test the API call</li>
          <li>Check browser console for detailed logs</li>
          <li>Compare the result with your working curl command</li>
          <li>If test fails, check the error details</li>
        </ol>
      </div>
    </div>
  );
};

export default LoginTest;

----------------------------------------
üìÑ src/components/auth/Login.jsx:
import React, { useState, useEffect } from 'react';
import { useApp } from '../../context/AppContext';
import authAPI from '../../services/authAPI';
import './Login.css';

const Login = ({ onLoginSuccess }) => {
  const { actions } = useApp();
  const [formData, setFormData] = useState({
    login: '',  // Can be email or username
    password: ''
  });
  const [rememberMe, setRememberMe] = useState(true); // Default to true for better UX
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  // Clear error when component unmounts
  useEffect(() => {
    return () => setError('');
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Clear error when user types
    if (error) setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // Debug logging
    console.log('=== LOGIN DEBUG ===');
    console.log('Login attempt:', {
      login: formData.login,
      rememberMe: rememberMe
    });

    try {
      // Use authAPI service for login
      const response = await authAPI.login(
        formData.login,
        formData.password,
        rememberMe
      );

      console.log('Login response:', {
        success: response.success,
        rememberMe: rememberMe,
        expiresAt: response.expires_at
      });

      console.log('‚úÖ Login successful');
                // Navigate to home
                if (actions.setView) {
                    actions.setView('home');
                }
                // Navigate to home
                if (actions.setView) {
                    actions.setView('home');
                });

        // Update app context if actions are available
        if (actions) {
          actions.setUser(response.user);
          actions.setIsAuthenticated(true);
          actions.setCurrentView('home');
        }

        // Call the success callback if provided
        if (onLoginSuccess) {
          onLoginSuccess(response);
        }
      } else {
        // Handle specific error cases
        let errorMessage = 'Login failed. Please try again.';
        
        if (response.code === 'EMAIL_NOT_VERIFIED') {
          errorMessage = 'Please verify your email before logging in. Check your inbox for the verification link.';
        } else if (response.code === 'INVALID_CREDENTIALS') {
          errorMessage = 'Invalid username/email or password. Please try again.';
        } else if (response.code === 'ACCOUNT_SUSPENDED') {
          errorMessage = 'Your account has been suspended. Please contact support.';
        } else if (response.code === 'NETWORK_ERROR') {
          errorMessage = 'Network error. Please check your connection and try again.';
        } else if (response.error) {
          errorMessage = response.error;
        }
        
        setError(errorMessage);
        console.error('Login failed:', response);
      }
    } catch (error) {
      console.error('Unexpected error during login:', error);
      setError('An unexpected error occurred. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleForgotPassword = () => {
    if (actions) {
      actions.setCurrentView('forgot-password');
    }
  };

  const handleSignUp = () => {
    if (actions) {
      actions.setCurrentView('register');
    }
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <div className="login-header">
          <h1 className="app-logo">nYtevibe</h1>
          <h2>Welcome Back</h2>
          <p>Sign in to continue to your nightlife experience</p>
        </div>

        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <label htmlFor="login">Username or Email</label>
            <input
              type="text"
              id="login"
              name="login"
              value={formData.login}
              onChange={handleChange}
              placeholder="Enter your username or email"
              required
              disabled={loading}
              autoComplete="username"
              autoFocus
              className="form-input"
            />
          </div>

          <div className="form-group">
            <label htmlFor="password">Password</label>
            <div className="password-input-wrapper">
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                placeholder="Enter your password"
                required
                disabled={loading}
                autoComplete="current-password"
                className="form-input"
              />
              <button
                type="button"
                className="password-toggle"
                onClick={togglePasswordVisibility}
                tabIndex="-1"
                aria-label={showPassword ? "Hide password" : "Show password"}
              >
                {showPassword ? (
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>
                    <line x1="1" y1="1" x2="23" y2="23"/>
                  </svg>
                ) : (
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                    <circle cx="12" cy="12" r="3"/>
                  </svg>
                )}
              </button>
            </div>
          </div>

          <div className="form-options">
            <label className="remember-me-container">
              <input
                type="checkbox"
                checked={rememberMe}
                onChange={(e) => setRememberMe(e.target.checked)}
                disabled={loading}
                className="remember-checkbox"
              />
              <span className="remember-label">Keep me logged in for 30 days</span>
            </label>
            
            <button
              type="button"
              className="forgot-password-link"
              onClick={handleForgotPassword}
              disabled={loading}
            >
              Forgot Password?
            </button>
          </div>

          {error && (
            <div className="error-message">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" className="error-icon">
                <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                <line x1="12" y1="9" x2="12" y2="13"/>
                <line x1="12" y1="17" x2="12.01" y2="17"/>
              </svg>
              <span>{error}</span>
            </div>
          )}

          <button
            type="submit"
            className="login-button"
            disabled={loading}
          >
            {loading ? (
              <>
                <span className="button-spinner"></span>
                <span>Signing in...</span>
              </>
            ) : (
              'Sign In'
            )}
          </button>
        </form>

        <div className="login-footer">
          <p className="signup-prompt">
            Don't have an account?{' '}
            <button
              type="button"
              className="signup-link"
              onClick={handleSignUp}
              disabled={loading}
            >
              Sign up
            </button>
          </p>
        </div>

        {rememberMe && (
          <div className="security-note">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
              <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
            </svg>
            <p>Your session will remain active for 30 days on this device</p>
          </div>
        )}

        {/* Debug info in development */}
        {process.env.NODE_ENV === 'development' && (
          <div className="debug-info">
            <small>Check browser console for debug information</small>
          </div>
        )}
      </div>
    </div>
  );
};

export default Login;

----------------------------------------
üìÑ src/App.css.backup-login-mobile-fix:
/* nYtevibe Complete CSS System - Version 1.2.3 */
/* Houston's Premier Nightlife Discovery Platform */

/* ============================================= */
/* GLOBAL STYLES & CSS VARIABLES */
/* ============================================= */

*, *::before, *::after {
  max-width: 100%;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

html, body {
  overflow-x: hidden;
  max-width: 100%;
}

body {
  overflow-x: hidden;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f8fafc;
}

:root {
  /* Colors */
  --color-primary: #3b82f6;
  --color-secondary: #8b5cf6;
  --color-accent: #fbbf24;
  --color-success: #10b981;
  --color-error: #ef4444;
  --color-warning: #f59e0b;
  
  /* Gradients */
  --gradient-primary: linear-gradient(135deg, #3b82f6, #8b5cf6);
  --gradient-secondary: linear-gradient(135deg, #8b5cf6, #ec4899);
  --gradient-accent: linear-gradient(135deg, #fbbf24, #f59e0b);
  
  /* Spacing */
  --mobile-padding: 12px;
  --tablet-padding: 16px;
  --desktop-padding: 20px;
  
  /* Touch targets */
  --min-touch-target: 40px;
  --comfortable-touch: 44px;
  
  /* Borders */
  --radius-sm: 6px;
  --radius-md: 8px;
  --radius-lg: 12px;
  --radius-xl: 16px;
  --radius-full: 9999px;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  
  /* Transitions */
  --transition-fast: all 0.15s ease;
  --transition-normal: all 0.2s ease;
  --transition-slow: all 0.3s ease;
  --transition-mobile: all 0.2s ease;
  --transform-mobile: translateY(-1px);
}

/* ============================================= */
/* LANDING PAGE STYLES */
/* ============================================= */

.landing-page {
  min-height: 100vh;
  background: linear-gradient(180deg, #0f172a 0%, #1e293b 50%, #334155 100%);
  color: white;
  width: 100%;
  overflow-x: hidden;
}

.landing-background {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 20% 80%, rgba(59, 130, 246, 0.3) 0%, transparent 50%),
              radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.3) 0%, transparent 50%),
              radial-gradient(circle at 40% 40%, rgba(251, 191, 36, 0.2) 0%, transparent 50%);
}

.landing-gradient {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, 
    rgba(59, 130, 246, 0.1) 0%, 
    rgba(139, 92, 246, 0.1) 50%, 
    rgba(251, 191, 36, 0.1) 100%);
}

.landing-container {
  position: relative;
  z-index: 2;
  max-width: 1200px;
  margin: 0 auto;
  padding: 40px 20px;
}

.landing-content {
  display: flex;
  flex-direction: column;
  gap: 80px;
}

/* Hero Section */
.hero-section {
  text-align: center;
  padding: 60px 0;
}

.hero-branding {
  margin-bottom: 40px;
}

.hero-logo {
  display: flex;
  justify-content: center;
  margin-bottom: 24px;
}

.logo-icon {
  width: 80px;
  height: 80px;
  background: var(--gradient-primary);
  border-radius: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: float 6s ease-in-out infinite;
}

.title-main {
  font-size: 2.5rem;
  font-weight: 900;
  background: linear-gradient(135deg, #3b82f6, #8b5cf6, #fbbf24);
  background-size: 200% 200%;
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: gradientShift 4s ease-in-out infinite;
  margin-bottom: 16px;
  line-height: 1.1;
}

.title-subtitle {
  font-size: 1.25rem;
  color: rgba(255, 255, 255, 0.8);
  margin-bottom: 24px;
}

.hero-description {
  max-width: 600px;
  margin: 0 auto 40px;
}

.hero-text {
  font-size: 1.125rem;
  line-height: 1.6;
  color: rgba(255, 255, 255, 0.9);
}

.hero-stats {
  display: flex;
  justify-content: center;
  gap: 40px;
  flex-wrap: wrap;
}

.stat-item {
  text-align: center;
}

.stat-number {
  display: block;
  font-size: 2rem;
  font-weight: 800;
  color: white;
}

.stat-label {
  font-size: 0.875rem;
  color: rgba(255, 255, 255, 0.7);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Features Section */
.features-section {
  text-align: center;
}

.section-title {
  font-size: 2rem;
  font-weight: 800;
  margin-bottom: 50px;
  background: linear-gradient(135deg, white, rgba(255, 255, 255, 0.8));
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  line-height: 1.2;
}

.features-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 32px;
  margin-top: 40px;
}

.feature-card {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  padding: 32px;
  text-align: center;
  transition: var(--transition-normal);
  animation: float 6s ease-in-out infinite;
}

.feature-card:nth-child(2) {
  animation-delay: -2s;
}

.feature-card:nth-child(3) {
  animation-delay: -4s;
}

.feature-card:hover {
  transform: translateY(-8px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  border-color: rgba(255, 255, 255, 0.2);
}

.feature-icon {
  margin-bottom: 16px;
  display: flex;
  justify-content: center;
}

.feature-title {
  font-size: 1.25rem;
  font-weight: 700;
  margin-bottom: 12px;
  color: white;
}

.feature-description {
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.5;
}

/* Selection Section */
.selection-section {
  text-align: center;
}

.selection-cards {
  display: grid;
  grid-template-columns: 1fr;
  gap: 40px;
  margin-top: 40px;
}

.profile-card {
  background: rgba(255, 255, 255, 0.95);
  border-radius: 24px;
  padding: 40px;
  color: #1e293b;
  position: relative;
  overflow: hidden;
  transition: var(--transition-normal);
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
}

.profile-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--gradient-primary);
}

.business-card::before {
  background: var(--gradient-secondary);
}

.profile-card:hover {
  transform: translateY(-12px);
  box-shadow: 0 30px 80px rgba(0, 0, 0, 0.4);
}

.card-header {
  text-align: center;
  margin-bottom: 32px;
}

.card-icon {
  margin-bottom: 16px;
  display: flex;
  justify-content: center;
}

.card-title {
  font-size: 1.5rem;
  font-weight: 800;
  margin-bottom: 8px;
  color: #1e293b;
}

.card-subtitle {
  color: #64748b;
  font-size: 1rem;
}

.card-benefits {
  margin-bottom: 32px;
}

.benefits-title {
  font-size: 1rem;
  font-weight: 600;
  color: #374151;
  margin-bottom: 16px;
  text-align: left;
}

.benefits-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.benefit-item {
  display: flex;
  align-items: center;
  gap: 12px;
  text-align: left;
  font-size: 0.875rem;
  color: #4b5563;
}

.cta-button {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 16px 24px;
  border: none;
  border-radius: var(--radius-lg);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-normal);
  background: var(--gradient-primary);
  color: white;
  min-height: var(--comfortable-touch);
}

.business-cta {
  background: var(--gradient-secondary);
}

.cta-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
}

.business-cta:hover {
  box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
}

/* Trust Section */
.trust-section {
  text-align: center;
  padding: 40px 0;
}

.trust-content {
  max-width: 600px;
  margin: 0 auto;
}

.trust-title {
  font-size: 1.5rem;
  font-weight: 700;
  margin-bottom: 16px;
  color: white;
}

.trust-description {
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.6;
}

/* ============================================= */
/* LOGIN PAGE STYLES */
/* ============================================= */

.login-page {
  min-height: 100vh;
  background: linear-gradient(180deg, #0f172a 0%, #1e293b 50%, #334155 100%);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px;
}

.login-background {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.login-gradient {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 30% 70%, rgba(59, 130, 246, 0.2) 0%, transparent 50%),
              radial-gradient(circle at 70% 30%, rgba(139, 92, 246, 0.2) 0%, transparent 50%);
}

.login-container {
  position: relative;
  z-index: 2;
  width: 100%;
  max-width: 1000px;
  display: grid;
  grid-template-columns: 1fr;
  gap: 40px;
  align-items: start;
}

.login-header {
  margin-bottom: 20px;
}

.back-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  border: 2px solid rgba(255, 255, 255, 0.2);
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  font-weight: 500;
  min-height: 40px;
}

.back-button:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
}

.login-card {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20px);
  border-radius: 24px;
  padding: 32px;
  color: #1e293b;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  max-width: 450px;
  width: 100%;
  margin: 0 auto;
}

.login-card-header {
  text-align: center;
  margin-bottom: 32px;
}

.login-logo {
  margin-bottom: 24px;
}

.login-title {
  font-size: 1.5rem;
  font-weight: 800;
  margin-bottom: 8px;
  color: #1e293b;
}

.login-subtitle {
  color: #64748b;
  font-size: 0.875rem;
}

.demo-banner {
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
  border: 2px solid #f59e0b;
  border-radius: 12px;
  padding: 16px;
  margin-bottom: 24px;
}

.demo-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 16px;
  flex-wrap: wrap;
}

.demo-info {
  flex: 1;
  min-width: 0;
}

.demo-title {
  font-size: 0.875rem;
  font-weight: 600;
  color: #92400e;
  margin-bottom: 4px;
}

.demo-description {
  font-size: 0.75rem;
  color: #a16207;
  line-height: 1.4;
}

.demo-fill-button {
  background: #92400e;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-normal);
  min-height: 36px;
  white-space: nowrap;
}

.demo-fill-button:hover {
  background: #78350f;
}

.login-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.form-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
}

.input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.input-icon {
  position: absolute;
  left: 12px;
  width: 16px;
  height: 16px;
  color: #9ca3af;
  z-index: 1;
}

.form-input {
  width: 100%;
  padding: 12px 12px 12px 40px;
  border: 2px solid #e5e7eb;
  border-radius: var(--radius-lg);
  background: #ffffff;
  color: #1e293b;
  font-size: 0.875rem;
  transition: var(--transition-normal);
  min-height: 44px;
}

.form-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.password-toggle {
  position: absolute;
  right: 12px;
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  padding: 4px;
  border-radius: var(--radius-sm);
  transition: var(--transition-normal);
  min-width: 24px;
  min-height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.password-toggle:hover {
  color: #6b7280;
  background: #f3f4f6;
}

.error-banner {
  display: flex;
  align-items: center;
  gap: 8px;
  background: #fef2f2;
  border: 1px solid #fecaca;
  border-radius: 8px;
  padding: 12px;
  color: #dc2626;
  font-size: 0.875rem;
}

.login-button {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 14px 20px;
  background: var(--gradient-primary);
  color: white;
  border: none;
  border-radius: var(--radius-lg);
  font-size: 0.875rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-normal);
  min-height: 48px;
}

.login-button:hover:not(:disabled) {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  transform: translateY(-1px);
}

.login-button:disabled {
  background: linear-gradient(135deg, #6b7280, #4b5563);
  cursor: not-allowed;
}

.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.login-card-footer {
  text-align: center;
  margin-top: 24px;
  padding-top: 24px;
  border-top: 1px solid #e5e7eb;
}

.footer-text {
  font-size: 0.875rem;
  color: #6b7280;
}

.footer-link {
  background: none;
  border: none;
  color: #3b82f6;
  font-weight: 500;
  cursor: pointer;
  text-decoration: underline;
}

.footer-link:hover {
  color: #2563eb;
}

.login-features {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  padding: 32px;
  color: white;
  max-width: 400px;
}

.features-title {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 20px;
  color: white;
}

.features-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.feature-item {
  display: flex;
  align-items: center;
  gap: 12px;
  font-size: 0.875rem;
  line-height: 1.5;
  color: rgba(255, 255, 255, 0.9);
}

/* ============================================= */
/* HEADER STYLES */
/* ============================================= */

.header {
  background: linear-gradient(135deg, #1e293b, #334155);
  color: white;
  position: sticky;
  top: 0;
  z-index: 1000;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.header-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 12px 16px;
  width: 100%;
}

.header-top {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
  flex-wrap: wrap;
  gap: 12px;
}

.brand-section {
  display: flex;
  flex-direction: column;
  min-width: 0;
}

.app-title {
  font-size: 1.5rem;
  font-weight: 800;
  color: white;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.app-subtitle {
  color: rgba(255, 255, 255, 0.7);
  font-size: 0.75rem;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.search-section {
  margin-top: 8px;
}

.search-container {
  position: relative;
  max-width: 600px;
  width: 100%;
}

.search-icon {
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
  width: 18px;
  height: 18px;
  color: rgba(255, 255, 255, 0.5);
  z-index: 1;
}

.search-input {
  width: 100%;
  padding: 10px 40px 10px 40px;
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: var(--radius-lg);
  background: rgba(255, 255, 255, 0.1);
  color: white;
  font-size: 0.875rem;
  transition: var(--transition-normal);
  max-width: 100%;
  min-width: 0;
}

.search-input::placeholder {
  color: rgba(255, 255, 255, 0.5);
}

.search-input:focus {
  outline: none;
  border-color: rgba(255, 255, 255, 0.3);
  background: rgba(255, 255, 255, 0.15);
}

.search-clear {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  padding: 6px;
  border-radius: var(--radius-sm);
  transition: var(--transition-normal);
  min-width: 32px;
  min-height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-clear:hover {
  color: #6b7280;
  background: rgba(255, 255, 255, 0.1);
}

/* ============================================= */
/* USER PROFILE STYLES */
/* ============================================= */

.user-profile-trigger {
  position: relative;
}

.user-profile-button {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px 12px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  color: white;
  border: none;
  font-family: inherit;
  min-height: 44px;
}

.user-profile-button:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
}

.user-avatar-trigger {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: var(--gradient-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 0.875rem;
  color: white;
  flex-shrink: 0;
}

.user-info-trigger {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  min-width: 0;
  max-width: 120px;
}

.user-name-trigger {
  font-size: 0.875rem;
  font-weight: 600;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.user-level-trigger {
  font-size: 0.75rem;
  color: rgba(255, 255, 255, 0.7);
  display: flex;
  align-items: center;
  gap: 4px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.points-trigger {
  margin-left: 4px;
}

.profile-chevron {
  color: rgba(255, 255, 255, 0.5);
  transition: var(--transition-normal);
}

.user-profile-button:hover .profile-chevron {
  color: rgba(255, 255, 255, 0.8);
  transform: rotate(180deg);
}

/* ============================================= */
/* HOME VIEW STYLES */
/* ============================================= */

.home-view {
  min-height: 100vh;
  background: #f8fafc;
  padding-bottom: 40px;
}

.home-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px 16px;
}

.section-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 20px;
}

/* Promotional Section */
.promotional-section {
  margin-bottom: 40px;
}

.promotional-banners {
  display: grid;
  gap: 16px;
  grid-template-columns: 1fr;
}

.promotional-banner {
  background: #ffffff;
  border-radius: var(--radius-xl);
  padding: 16px 20px;
  margin-bottom: 16px;
  box-shadow: var(--shadow-md);
  border: 2px solid;
  transition: var(--transition-normal);
  cursor: pointer;
  position: relative;
  overflow: hidden;
  width: 100%;
  max-width: 100%;
  border-color: #f59e0b;
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
}

.promotional-banner:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
}

.banner-content {
  display: flex;
  align-items: center;
  gap: 12px;
  flex-wrap: wrap;
}

.banner-text {
  flex: 1;
  min-width: 0;
}

.banner-title {
  font-weight: 700;
  font-size: 0.9rem;
  margin-bottom: 2px;
  line-height: 1.3;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  word-wrap: break-word;
  overflow-wrap: break-word;
  color: #92400e;
}

.banner-subtitle {
  font-size: 0.8rem;
  line-height: 1.4;
  opacity: 0.95;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  word-wrap: break-word;
  overflow-wrap: break-word;
  color: #a16207;
}

.banner-cta {
  padding: 8px 16px;
  background: #92400e;
  color: white;
  border-radius: var(--radius-md);
  font-size: 0.875rem;
  font-weight: 600;
  white-space: nowrap;
}

/* Filter Section */
.filter-section {
  margin-bottom: 32px;
}

.filter-header {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.filter-options {
  display: flex;
  gap: 8px;
  overflow-x: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding-bottom: 4px;
}

.filter-options::-webkit-scrollbar {
  display: none;
}

.filter-option {
  padding: 8px 16px;
  border: 2px solid rgba(59, 130, 246, 0.2);
  background: rgba(59, 130, 246, 0.1);
  color: rgba(59, 130, 246, 0.8);
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  font-size: 0.875rem;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 6px;
  white-space: nowrap;
  flex-shrink: 0;
  min-height: 40px;
}

.filter-option:hover {
  background: rgba(59, 130, 246, 0.15);
  color: #3b82f6;
}

.filter-option.active {
  background: var(--gradient-primary);
  color: white;
  border-color: #3b82f6;
}

/* Venues Section */
.venues-section {
  margin-top: 32px;
}

.venues-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
  width: 100%;
}

.empty-state {
  text-align: center;
  padding: 60px 20px;
  color: #6b7280;
}

.empty-icon {
  margin-bottom: 16px;
  display: flex;
  justify-content: center;
}

.empty-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 8px;
  color: #374151;
}

.empty-description {
  color: #6b7280;
  line-height: 1.5;
}

/* ============================================= */
/* VENUE CARD STYLES */
/* ============================================= */

.venue-card-container {
  background: #ffffff;
  border-radius: var(--radius-xl);
  padding: 16px;
  margin-bottom: 16px;
  box-shadow: var(--shadow-md);
  transition: var(--transition-normal);
  position: relative;
  border: 2px solid transparent;
  width: 100%;
  max-width: 100%;
  overflow: hidden;
}

.venue-card-container:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
}

.venue-card-header-fixed {
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 12px;
  margin-bottom: 12px;
}

.venue-info-section {
  display: flex;
  flex-direction: column;
  gap: 6px;
  min-width: 0;
}

.venue-name {
  font-size: 1rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
  flex: 1;
  min-width: 0;
  word-wrap: break-word;
  overflow-wrap: break-word;
  line-height: 1.2;
}

.venue-meta {
  display: flex;
  align-items: center;
  gap: 6px;
  flex-wrap: wrap;
  font-size: 0.75rem;
  color: #9ca3af;
}

.venue-type {
  font-weight: 500;
  color: #6b7280;
}

.venue-separator {
  color: #d1d5db;
}

.venue-address {
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.venue-rating {
  display: flex;
  align-items: center;
  gap: 6px;
}

.rating-count {
  font-size: 0.75rem;
  color: #9ca3af;
}

.venue-actions-section {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 8px;
  flex-shrink: 0;
}

.venue-status-section {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
  flex-wrap: wrap;
  gap: 8px;
}

.status-items {
  display: flex;
  gap: 16px;
  flex-wrap: wrap;
}

.status-item {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.75rem;
}

.status-icon {
  width: 14px;
  height: 14px;
  color: #6b7280;
}

.status-text {
  font-weight: 500;
}

.status-meta {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  font-size: 0.7rem;
  color: #9ca3af;
  text-align: right;
}

.venue-vibe-section {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  margin-bottom: 12px;
}

.vibe-tag {
  padding: 3px 8px;
  background: var(--gradient-primary);
  color: white;
  border-radius: var(--radius-full);
  font-size: 0.7rem;
  font-weight: 500;
}

.vibe-tag.more {
  background: #e2e8f0;
  color: #64748b;
}

.venue-promotion {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 10px;
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
  border-radius: var(--radius-md);
  margin-bottom: 12px;
  font-size: 0.75rem;
  border: 1px solid #f59e0b;
}

.promotion-icon {
  font-size: 0.875rem;
}

.promotion-text {
  color: #92400e;
  font-weight: 500;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.venue-card-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 12px;
  flex-wrap: wrap;
}

.venue-stats {
  display: flex;
  gap: 16px;
  font-size: 0.75rem;
  color: #6b7280;
}

.stat-item {
  display: flex;
  flex-direction: column;
  text-align: center;
}

.stat-number {
  font-weight: 600;
  color: #374151;
}

.stat-label {
  font-size: 0.7rem;
  color: #9ca3af;
}

.details-btn-full {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 8px 16px;
  background: var(--gradient-primary);
  color: white;
  border: none;
  border-radius: var(--radius-lg);
  font-size: 0.8rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-normal);
  min-height: 36px;
  white-space: nowrap;
}

.details-btn-full:hover {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  transform: translateY(-1px);
}

/* ============================================= */
/* FOLLOW BUTTON STYLES */
/* ============================================= */

.follow-button {
  border-radius: var(--radius-full);
  border: 2px solid #e5e7eb;
  background: #f9fafb;
  color: #6b7280;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: var(--transition-normal);
  position: relative;
}

.follow-button.w-8 { width: 32px; height: 32px; }
.follow-button.w-10 { width: 40px; height: 40px; }
.follow-button.w-12 { width: 48px; height: 48px; }

.follow-button:hover {
  background: #f3f4f6;
  border-color: #d1d5db;
  transform: scale(1.05);
}

.follow-button.followed {
  background: #fee2e2;
  border-color: #fca5a5;
  color: #dc2626;
}

.follow-button.followed:hover {
  background: #fecaca;
  border-color: #f87171;
}

.follow-button-text {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 16px;
  border-radius: var(--radius-lg);
  border: 2px solid #e5e7eb;
  background: #f9fafb;
  color: #6b7280;
  cursor: pointer;
  transition: var(--transition-normal);
  font-size: 0.875rem;
  font-weight: 500;
  min-height: 36px;
}

.follow-button-text:hover {
  background: #f3f4f6;
  border-color: #d1d5db;
}

.follow-button-text.followed {
  background: #fee2e2;
  border-color: #fca5a5;
  color: #dc2626;
}

/* ============================================= */
/* FOLLOW STATS STYLES */
/* ============================================= */

.follow-stats {
  background: #f8fafc;
  border-radius: var(--radius-lg);
  padding: 16px;
  margin: 16px 0;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
  margin-bottom: 12px;
}

.stat-item {
  display: flex;
  align-items: center;
  gap: 8px;
}

.stat-icon {
  flex-shrink: 0;
}

.stat-content {
  display: flex;
  flex-direction: column;
}

.stat-value {
  font-size: 1rem;
  font-weight: 600;
  color: #1e293b;
}

.stat-label {
  font-size: 0.75rem;
  color: #64748b;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.following-indicator {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 0.875rem;
  color: #dc2626;
  font-weight: 500;
}

/* ============================================= */
/* STAR RATING STYLES */
/* ============================================= */

.star-rating {
  display: flex;
  align-items: center;
  gap: 4px;
}

.stars {
  display: flex;
  gap: 2px;
}

.rating-text {
  font-size: 0.875rem;
  color: #6b7280;
  margin-left: 4px;
}

/* ============================================= */
/* MODAL STYLES */
/* ============================================= */

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.75);
  backdrop-filter: blur(8px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  padding: 16px;
  animation: modalOverlayFadeIn 0.2s ease-out;
}

.modal-content {
  background: #ffffff;
  border-radius: 16px;
  width: 100%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);
  color: #1e293b;
  animation: modalSlideIn 0.3s ease-out;
  position: relative;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px;
  border-bottom: 1px solid #f1f5f9;
}

.modal-title {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
  margin: 0;
}

.modal-close {
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  padding: 4px;
  border-radius: var(--radius-sm);
  transition: var(--transition-normal);
}

.modal-close:hover {
  color: #6b7280;
  background: #f3f4f6;
}

.modal-close-button {
  position: absolute;
  top: 16px;
  right: 16px;
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  padding: 8px;
  border-radius: var(--radius-sm);
  transition: var(--transition-normal);
  z-index: 1;
}

.modal-close-button:hover {
  color: #6b7280;
  background: #f3f4f6;
}

.modal-body {
  padding: 24px;
}

.modal-actions {
  display: flex;
  gap: 12px;
  margin-top: 24px;
  justify-content: flex-end;
}

.cancel-button {
  padding: 10px 20px;
  background: #f8fafc;
  color: #374151;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  font-weight: 500;
}

.cancel-button:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
}

.submit-button {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 10px 20px;
  background: var(--gradient-primary);
  color: white;
  border: none;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  font-weight: 600;
}

.submit-button:hover:not(:disabled) {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
}

.submit-button:disabled {
  background: #9ca3af;
  cursor: not-allowed;
}

/* User Profile Modal Specific */
.user-profile-modal .modal-content {
  max-width: 450px;
  width: 90%;
}

.profile-modal-header {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 24px;
  background: #fafbfc;
  border-bottom: 1px solid #f1f5f9;
}

.modal-avatar-large {
  width: 64px;
  height: 64px;
  border-radius: 50%;
  background: var(--gradient-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 1.5rem;
  color: white;
  flex-shrink: 0;
}

.profile-modal-info {
  flex: 1;
  min-width: 0;
}

.profile-modal-name {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
  margin: 0 0 4px 0;
}

.profile-modal-username {
  font-size: 0.875rem;
  color: #64748b;
  margin: 0 0 8px 0;
}

.level-badge-modal {
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  background: var(--gradient-primary);
  color: white;
  border-radius: var(--radius-full);
  font-size: 0.75rem;
  font-weight: 500;
}

.profile-modal-stats {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
  padding: 20px 24px;
  border-bottom: 1px solid #f1f5f9;
}

.profile-stat {
  text-align: center;
}

.profile-stat-number {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
  display: block;
}

.profile-stat-label {
  font-size: 0.75rem;
  color: #64748b;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.profile-modal-menu {
  padding: 16px 0;
}

.profile-menu-item {
  display: flex;
  align-items: center;
  gap: 12px;
  width: 100%;
  padding: 12px 24px;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
  transition: var(--transition-normal);
  font-size: 0.875rem;
  color: #374151;
}

.profile-menu-item:hover {
  background: #f8fafc;
}

.profile-menu-item.danger {
  color: #dc2626;
}

.profile-menu-item.danger:hover {
  background: #fef2f2;
}

/* Rating Modal Specific */
.rating-section {
  text-align: center;
  margin-bottom: 24px;
}

.rating-stars-large {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin: 16px 0;
}

.rating-star {
  width: 40px;
  height: 40px;
  color: #d1d5db;
  cursor: pointer;
  transition: all 0.2s ease;
  stroke-width: 2;
}

.rating-star:hover {
  transform: scale(1.15);
  color: #fbbf24;
}

.rating-star.active {
  color: #fbbf24;
  fill: currentColor;
  filter: drop-shadow(0 2px 4px rgba(251, 191, 36, 0.4));
}

.rating-text {
  font-size: 0.875rem;
  color: #6b7280;
  margin-top: 8px;
}

.comment-section {
  margin-bottom: 24px;
}

.form-label {
  display: block;
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
  margin-bottom: 8px;
}

.form-textarea {
  width: 100%;
  padding: 12px;
  border: 2px solid #e5e7eb;
  border-radius: var(--radius-lg);
  background: #ffffff;
  color: #1e293b;
  font-size: 0.875rem;
  font-family: inherit;
  transition: var(--transition-normal);
  resize: vertical;
  min-height: 80px;
}

.form-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Report Modal Specific */
.report-type-section {
  margin-bottom: 24px;
}

.report-types {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 12px;
}

.report-type-button {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 16px;
  border: 2px solid #e2e8f0;
  background: #f8fafc;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: left;
  width: 100%;
}

.report-type-button:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
  transform: translateY(-1px);
}

.report-type-button.active {
  border-color: #3b82f6;
  background: rgba(59, 130, 246, 0.05);
  box-shadow: 0 0 0 1px rgba(59, 130, 246, 0.1);
}

.report-type-content {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.report-type-label {
  font-weight: 600;
  color: #1e293b;
}

.report-type-description {
  font-size: 0.875rem;
  color: #64748b;
}

.crowd-level-section,
.wait-time-section {
  margin-bottom: 24px;
}

.crowd-slider,
.wait-slider {
  width: 100%;
  margin: 12px 0;
  -webkit-appearance: none;
  height: 8px;
  border-radius: 4px;
  background: #f1f5f9;
  outline: none;
}

.crowd-slider::-webkit-slider-thumb,
.wait-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: #3b82f6;
  cursor: pointer;
  transition: var(--transition-normal);
}

.crowd-slider::-webkit-slider-thumb:hover,
.wait-slider::-webkit-slider-thumb:hover {
  transform: scale(1.2);
}

.crowd-labels,
.wait-labels {
  display: flex;
  justify-content: space-between;
  font-size: 0.75rem;
  color: #64748b;
}

.notes-section {
  margin-bottom: 24px;
}

/* Share Modal Specific */
.share-preview {
  margin-bottom: 24px;
  padding: 16px;
  background: #f8fafc;
  border-radius: var(--radius-lg);
  border: 1px solid #e2e8f0;
}

.venue-preview {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.venue-preview-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 12px;
}

.venue-preview-name {
  font-size: 1rem;
  font-weight: 600;
  color: #1e293b;
  margin: 0;
}

.venue-preview-type {
  font-size: 0.875rem;
  color: #64748b;
  white-space: nowrap;
}

.venue-preview-stats {
  display: flex;
  gap: 12px;
  font-size: 0.875rem;
}

.venue-preview-description {
  font-size: 0.875rem;
  color: #64748b;
  line-height: 1.4;
  margin: 0;
}

.share-text-section {
  margin-bottom: 24px;
}

.share-text {
  padding: 12px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  font-size: 0.875rem;
  color: #374151;
  line-height: 1.5;
}

.share-options {
  margin-bottom: 24px;
}

.share-buttons {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 12px;
}

.share-option-button {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  border: 2px solid #e2e8f0;
  background: #f8fafc;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  text-align: left;
  width: 100%;
}

.share-option-button:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
}

.share-option-button.success {
  border-color: #10b981;
  background: #f0fdf4;
  color: #065f46;
}

.share-option-content {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.share-option-label {
  font-weight: 600;
  color: #1e293b;
}

.share-option-description {
  font-size: 0.875rem;
  color: #64748b;
}

/* ============================================= */
/* VENUE DETAILS VIEW STYLES */
/* ============================================= */

.venue-details-view {
  min-height: 100vh;
  background: #f8fafc;
  background: linear-gradient(180deg, #f8fafc 0%, #f1f5f9 100%);
  width: 100%;
  overflow-x: hidden;
}

.details-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 16px;
  background: #ffffff;
  border-bottom: 1px solid #e2e8f0;
  position: sticky;
  top: 0;
  z-index: 100;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  width: 100%;
  overflow-x: hidden;
  flex-wrap: wrap;
  gap: 8px;
}

.share-button-header {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 12px;
  border: 2px solid #e2e8f0;
  background: #f8fafc;
  color: #64748b;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  font-weight: 500;
  font-size: 0.8rem;
  white-space: nowrap;
  min-height: 36px;
}

.share-button-header:hover {
  background: #e2e8f0;
  border-color: #cbd5e1;
  color: #475569;
}

.header-actions {
  display: flex;
  gap: 8px;
  align-items: center;
  flex-wrap: wrap;
}

.details-hero {
  background: white;
  padding: 20px 16px;
  border-bottom: 1px solid #f1f5f9;
  width: 100%;
  overflow-x: hidden;
}

.hero-content {
  width: 100%;
  max-width: 100%;
}

.venue-title-section {
  width: 100%;
  overflow-x: hidden;
}

.venue-title {
  font-size: 1.5rem;
  font-weight: 800;
  color: #1e293b;
  margin-bottom: 6px;
  word-wrap: break-word;
  overflow-wrap: break-word;
  line-height: 1.2;
}

.venue-subtitle {
  font-size: 0.9rem;
  color: #64748b;
  margin-bottom: 12px;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.venue-separator {
  margin: 0 6px;
  color: #cbd5e1;
}

.venue-rating-section {
  margin-top: 12px;
}

/* Status Cards Section */
.status-cards-section {
  padding: 16px;
  background: white;
  border-bottom: 1px solid #f1f5f9;
  width: 100%;
  overflow-x: hidden;
}

.status-cards {
  display: grid;
  grid-template-columns: 1fr;
  gap: 12px;
  width: 100%;
}

.status-card {
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  padding: 12px;
  display: flex;
  align-items: center;
  gap: 10px;
  transition: var(--transition-normal);
  width: 100%;
  overflow: hidden;
}

.status-card:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
}

.status-icon-wrapper {
  width: 36px;
  height: 36px;
  border-radius: var(--radius-lg);
  background: #e2e8f0;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.status-card-icon {
  width: 18px;
  height: 18px;
  color: #64748b;
}

.status-info {
  flex: 1;
  min-width: 0;
}

.status-label {
  font-size: 0.7rem;
  color: #64748b;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  display: block;
}

.status-value {
  font-size: 1rem;
  font-weight: 700;
  color: #1e293b;
  margin: 2px 0;
  word-wrap: break-word;
}

.status-meta {
  font-size: 0.7rem;
  color: #9ca3af;
  word-wrap: break-word;
}

/* Tab Navigation */
.tab-navigation {
  background: white;
  border-bottom: 1px solid #e2e8f0;
  padding: 0 16px;
  width: 100%;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

.tab-buttons {
  display: flex;
  gap: 0;
  overflow-x: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  min-width: max-content;
}

.tab-buttons::-webkit-scrollbar {
  display: none;
}

.tab-button {
  padding: 12px 16px;
  border: none;
  background: none;
  color: #64748b;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-normal);
  border-bottom: 3px solid transparent;
  white-space: nowrap;
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.8rem;
  min-height: 40px;
  flex-shrink: 0;
}

.tab-button:hover {
  color: #475569;
  background: #f8fafc;
}

.tab-button.active {
  color: var(--color-primary);
  border-bottom-color: var(--color-primary);
  background: #f8fafc;
  font-weight: 600;
}

.tab-count {
  font-size: 0.7rem;
  color: #9ca3af;
  background: #f1f5f9;
  padding: 2px 6px;
  border-radius: 10px;
  min-width: 18px;
  text-align: center;
}

.tab-content-wrapper {
  background: white;
  padding: 16px;
  min-height: 400px;
  width: 100%;
  overflow-x: hidden;
}

.tab-content {
  width: 100%;
  overflow-x: hidden;
}

.section {
  margin-bottom: 24px;
  width: 100%;
  overflow-x: hidden;
}

.section h4 {
  font-size: 1rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 12px;
}

/* Vibe Tags Large */
.vibe-tags-large {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

/* Promotion Highlight */
.promotion-highlight {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  padding: 16px;
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
  border-radius: var(--radius-lg);
  border: 2px solid #f59e0b;
  flex-direction: column;
}

.promotion-icon {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.promotion-content {
  flex: 1;
  min-width: 0;
}

.promotion-content h4 {
  margin: 0 0 6px 0;
  color: #92400e;
  font-size: 0.9rem;
}

.promotion-content p {
  margin: 0;
  color: #a16207;
  font-weight: 500;
  font-size: 0.8rem;
  word-wrap: break-word;
}

/* Amenities Grid */
.amenities-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
  gap: 8px;
}

.amenity-item {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  font-size: 0.8rem;
  transition: var(--transition-normal);
  min-height: 40px;
}

.amenity-item.available {
  background: #f0fdf4;
  border-color: #bbf7d0;
  color: #15803d;
}

.amenity-item.unavailable {
  background: #fafafa;
  border-color: #e5e7eb;
  color: #9ca3af;
}

.amenity-icon {
  width: 16px;
  height: 16px;
  flex-shrink: 0;
}

/* Quick Actions */
.quick-actions {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.action-button {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 10px 16px;
  border: none;
  border-radius: var(--radius-lg);
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-normal);
  font-size: 0.8rem;
  min-height: 40px;
  flex: 1;
  justify-content: center;
}

.action-button.primary {
  background: var(--gradient-primary);
  color: white;
}

.action-button.primary:hover {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  transform: translateY(-1px);
}

.action-button.secondary {
  background: #f1f5f9;
  color: #475569;
  border: 1px solid #e2e8f0;
}

.action-button.secondary:hover {
  background: #e2e8f0;
  color: #334155;
}

/* Rating Summary */
.rating-summary {
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  padding: 16px;
  width: 100%;
  overflow-x: hidden;
}

.rating-overview {
  display: grid;
  grid-template-columns: 1fr;
  gap: 16px;
  align-items: center;
  text-align: center;
}

.rating-score {
  text-align: center;
  margin-bottom: 16px;
}

.score {
  font-size: 2.5rem;
  font-weight: 800;
  color: #1e293b;
  line-height: 1;
}

.rating-stars {
  margin: 6px 0;
}

.rating-label {
  font-size: 0.8rem;
  color: #64748b;
}

.rating-breakdown {
  width: 100%;
}

.rating-breakdown h4 {
  margin-bottom: 12px;
  font-size: 0.9rem;
}

.rating-row {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 6px;
}

.rating-bar {
  flex: 1;
  height: 6px;
  background: #f1f5f9;
  border-radius: var(--radius-full);
  overflow: hidden;
}

.rating-fill {
  height: 100%;
  background: #fbbf24;
  transition: width 0.3s ease;
}

/* Reviews */
.reviews-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
  flex-wrap: wrap;
  gap: 8px;
}

.write-review-button {
  padding: 6px 12px;
  background: var(--gradient-primary);
  color: white;
  border: none;
  border-radius: var(--radius-lg);
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-normal);
  font-size: 0.7rem;
  min-height: 32px;
  white-space: nowrap;
}

.write-review-button:hover {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
}

.reviews-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.review-card {
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  padding: 12px;
  width: 100%;
  overflow-x: hidden;
}

.review-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 10px;
  flex-wrap: wrap;
  gap: 8px;
}

.review-author {
  display: flex;
  gap: 8px;
  flex: 1;
  min-width: 0;
}

.author-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: var(--gradient-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  flex-shrink: 0;
  font-size: 0.8rem;
}

.author-info {
  flex: 1;
  min-width: 0;
}

.author-name {
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 2px;
  font-size: 0.8rem;
  word-wrap: break-word;
}

.review-meta {
  display: flex;
  align-items: center;
  gap: 6px;
  flex-wrap: wrap;
}

.review-date {
  font-size: 0.7rem;
  color: #9ca3af;
}

.helpful-button {
  background: none;
  border: 1px solid #e2e8f0;
  padding: 3px 6px;
  border-radius: var(--radius-sm);
  font-size: 0.7rem;
  color: #64748b;
  cursor: pointer;
  transition: var(--transition-normal);
  white-space: nowrap;
  min-height: 28px;
}

.helpful-button:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
}

.review-content {
  margin-top: 8px;
}

.review-content p {
  color: #374151;
  line-height: 1.4;
  margin: 0;
  font-size: 0.8rem;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.show-more-reviews {
  width: 100%;
  padding: 10px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  color: #475569;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-normal);
  margin-top: 12px;
  font-size: 0.8rem;
  min-height: 40px;
}

.show-more-reviews:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
}

/* Contact Info */
.contact-info {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.contact-item {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  min-height: 50px;
}

.contact-icon {
  width: 18px;
  height: 18px;
  color: #64748b;
  flex-shrink: 0;
}

.contact-details {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-width: 0;
}

.contact-label {
  font-size: 0.7rem;
  color: #9ca3af;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.contact-value {
  font-size: 0.8rem;
  color: #374151;
  font-weight: 500;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.contact-action {
  width: 32px;
  height: 32px;
  border: 1px solid #e2e8f0;
  background: white;
  border-radius: var(--radius-lg);
  display: flex;
  align-items: center;
  justify-content: center;
  color: #64748b;
  cursor: pointer;
  transition: var(--transition-normal);
  flex-shrink: 0;
}

.contact-action:hover {
  background: #f8fafc;
  border-color: #cbd5e1;
  color: #475569;
}

/* Navigation Actions */
.navigation-actions {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.nav-button {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: var(--transition-normal);
  text-align: left;
  min-height: 50px;
}

.nav-button:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
}

.nav-button svg {
  width: 20px;
  height: 20px;
  flex-shrink: 0;
  color: #64748b;
}

.nav-title {
  font-weight: 600;
  color: #374151;
  display: block;
  margin-bottom: 2px;
  font-size: 0.8rem;
}

.nav-subtitle {
  font-size: 0.7rem;
  color: #9ca3af;
}

/* Venue Stats */
.venue-stats {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 12px;
}

.stat-card {
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: var(--radius-lg);
  padding: 12px;
  text-align: center;
  min-height: 60px;
}

.stat-number {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 2px;
}

/* ============================================= */
/* NOTIFICATION STYLES */
/* ============================================= */

.notification-container {
  position: fixed;
  top: 16px;
  right: 16px;
  left: 16px;
  z-index: 10000;
  display: flex;
  flex-direction: column;
  gap: 8px;
  max-width: none;
}

.notification {
  background: white;
  border-radius: 10px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  border-left: 4px solid #3b82f6;
  animation: notificationSlideIn 0.3s ease-out;
  overflow: hidden;
  max-width: 100%;
}

.notification-content {
  padding: 12px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.notification-icon {
  flex-shrink: 0;
}

.notification-message {
  font-size: 0.8rem;
  color: #374151;
  font-weight: 500;
  flex: 1;
  min-width: 0;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.notification-close {
  background: none;
  border: none;
  font-size: 1.1rem;
  color: #9ca3af;
  cursor: pointer;
  padding: 4px;
  line-height: 1;
  min-width: 24px;
  min-height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.notification-close:hover {
  color: #6b7280;
}

/* ============================================= */
/* ANIMATIONS */
/* ============================================= */

@keyframes gradientShift {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes modalOverlayFadeIn {
  from {
    opacity: 0;
    backdrop-filter: blur(0px);
  }
  to {
    opacity: 1;
    backdrop-filter: blur(8px);
  }
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: translateY(-20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes notificationSlideIn {
  from {
    opacity: 0;
    transform: translateX(100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* ============================================= */
/* RESPONSIVE DESIGN */
/* ============================================= */

/* Tablet Responsiveness (768px+) */
@media (min-width: 768px) {
  .title-main {
    font-size: 3rem;
  }

  .features-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 32px;
  }

  .selection-cards {
    grid-template-columns: repeat(2, 1fr);
    gap: 40px;
  }

  .venues-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 24px;
  }

  .status-cards {
    grid-template-columns: repeat(2, 1fr);
    gap: 16px;
  }

  .venue-stats {
    grid-template-columns: repeat(4, 1fr);
  }

  .profile-modal-stats {
    grid-template-columns: repeat(4, 1fr);
  }

  .rating-overview {
    grid-template-columns: auto 1fr;
    text-align: left;
  }

  .rating-score {
    text-align: center;
    margin-bottom: 0;
  }

  .promotion-highlight {
    flex-direction: row;
    align-items: center;
  }

  .user-info-trigger {
    display: flex;
    max-width: none;
  }

  .notification-container {
    left: auto;
    right: 20px;
    top: 20px;
    max-width: 400px;
  }

  .login-container {
    grid-template-columns: 1fr 1fr;
    gap: 60px;
    align-items: center;
  }
}

/* Desktop Responsiveness (1024px+) */
@media (min-width: 1024px) {
  .title-main {
    font-size: 4rem;
  }

  .features-grid {
    grid-template-columns: repeat(4, 1fr);
  }

  .venues-grid {
    grid-template-columns: repeat(3, 1fr);
  }

  .status-cards {
    grid-template-columns: repeat(3, 1fr);
  }

  .score {
    font-size: 3rem;
  }

  .amenities-grid {
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  }

  .action-button {
    flex: 0 0 auto;
    min-width: 140px;
  }

  .quick-actions {
    flex-wrap: nowrap;
  }
}

/* Ultra-Wide Screens (1200px+) */
@media (min-width: 1200px) {
  .header-content {
    max-width: 1200px;
  }

  .home-content {
    max-width: 1200px;
    margin: 0 auto;
  }

  .landing-container {
    max-width: 1200px;
  }
}

/* Mobile-specific improvements */
@media (max-width: 480px) {
  .venue-title {
    font-size: 1.25rem;
  }

  .status-cards {
    grid-template-columns: 1fr;
  }

  .venue-stats {
    grid-template-columns: repeat(2, 1fr);
  }

  .details-header {
    padding: 10px 12px;
  }

  .tab-content-wrapper {
    padding: 12px;
  }

  .status-cards-section {
    padding: 12px;
  }

  .profile-modal-stats {
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }

  .user-info-trigger {
    display: none;
  }

  .login-card {
    padding: 24px;
  }

  .modal-actions {
    flex-direction: column;
    gap: 8px;
  }

  .submit-button,
  .cancel-button {
    width: 100%;
  }
}

/* Focus States for Accessibility */
.tab-button:focus,
.action-button:focus,
.nav-button:focus,
.contact-action:focus,
.helpful-button:focus,
.write-review-button:focus,
.show-more-reviews:focus,
.filter-option:focus,
.follow-button:focus,
.details-btn-full:focus,
.cta-button:focus,
.login-button:focus,
.back-button:focus,
.user-profile-button:focus {
  outline: 2px solid #fbbf24;
  outline-offset: 2px;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .venue-card-container {
    border: 2px solid #000;
  }

  .promotional-banner {
    border: 3px solid #000;
  }

  .modal-content {
    border: 2px solid #000;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .feature-card,
  .venue-card-container:hover,
  .cta-button:hover,
  .login-button:hover,
  .action-button:hover {
    animation: none;
    transform: none;
  }

  .title-main {
    animation: none;
  }

  .logo-icon {
    animation: none;
  }
}

/* Ensure proper text wrapping in all sections */
.tab-content *,
.modal-body *,
.venue-card-container *,
.notification-message,
.review-content p,
.promotion-text,
.banner-subtitle {
  word-wrap: break-word;
  overflow-wrap: break-word;
  max-width: 100%;
}

/* ============================================= */
/* MOBILE ENHANCEMENT STYLES */
/* ============================================= */

/* Enhanced Mobile Touch Interactions */
@media (max-width: 768px) {
  
  /* Improved Touch Targets */
  .follow-button,
  .action-button,
  .filter-option,
  .tab-button,
  .contact-action,
  .nav-button,
  .details-btn-full {
    min-height: 48px;
    min-width: 48px;
    padding: 12px;
    font-size: 0.9rem;
  }

  /* Enhanced Mobile Venue Cards */
  .venue-card-container {
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .venue-card-container:active {
    transform: scale(0.98);
    transition: transform 0.1s ease;
  }

  /* Mobile-Optimized Header */
  .header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1001;
  }

  .app {
    padding-top: 140px; /* Account for fixed header */
  }

  /* Enhanced Mobile Search */
  .search-input {
    font-size: 16px; /* Prevents zoom on iOS */
    padding: 14px 44px 14px 44px;
    border-radius: 12px;
  }

  /* Mobile-Friendly Modal Adjustments */
  .modal-overlay {
    padding: 8px;
  }

  .modal-content {
    max-height: 95vh;
    width: 100%;
    margin: 0;
    border-radius: 12px;
  }

  .modal-header {
    padding: 16px 20px;
    position: sticky;
    top: 0;
    background: white;
    z-index: 1;
  }

  .modal-body {
    padding: 20px;
    padding-bottom: 100px; /* Extra space for virtual keyboard */
  }

  /* Enhanced Mobile Tab Navigation */
  .tab-navigation {
    position: sticky;
    top: 60px; /* Below header */
    z-index: 100;
    background: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .tab-button {
    min-height: 48px;
    font-size: 0.9rem;
    padding: 12px 20px;
  }

  /* Mobile Status Cards Enhancement */
  .status-cards {
    grid-template-columns: 1fr;
    gap: 16px;
  }

  .status-card {
    padding: 16px;
    border-radius: 16px;
  }

  /* Mobile-Friendly Quick Actions */
  .quick-actions {
    display: grid;
    grid-template-columns: 1fr;
    gap: 12px;
  }

  .action-button {
    width: 100%;
    justify-content: center;
    padding: 16px;
    font-size: 1rem;
    font-weight: 600;
  }

  /* Enhanced Mobile Contact Items */
  .contact-item,
  .nav-button {
    padding: 16px;
    border-radius: 16px;
    min-height: 60px;
  }

  /* Mobile Profile Modal Enhancements */
  .profile-modal-header {
    padding: 24px 20px;
  }

  .profile-modal-stats {
    grid-template-columns: repeat(2, 1fr);
    gap: 16px;
    padding: 20px;
  }

  .profile-menu-item {
    padding: 16px 20px;
    min-height: 56px;
    font-size: 1rem;
  }

  /* Mobile Rating Modal */
  .rating-stars-large {
    gap: 12px;
    margin: 20px 0;
  }

  .rating-star {
    width: 44px;
    height: 44px;
  }

  /* Mobile Form Enhancements */
  .form-input,
  .form-textarea {
    font-size: 16px; /* Prevents zoom on iOS */
    padding: 16px;
    border-radius: 12px;
    min-height: 48px;
  }

  .form-textarea {
    min-height: 120px;
  }

  /* Mobile Review Cards */
  .review-card {
    padding: 16px;
    border-radius: 16px;
  }

  .author-avatar {
    width: 40px;
    height: 40px;
    font-size: 1rem;
  }

  /* Mobile Amenities Grid */
  .amenities-grid {
    grid-template-columns: 1fr;
    gap: 12px;
  }

  .amenity-item {
    padding: 12px;
    border-radius: 12px;
    min-height: 48px;
  }

  /* Mobile Venue Stats */
  .venue-stats {
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }

  .stat-card {
    padding: 16px;
    border-radius: 16px;
    min-height: 70px;
  }

  .stat-number {
    font-size: 1.5rem;
  }

  /* Enhanced Landing Page Mobile */
  .hero-stats {
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
  }

  .stat-number {
    font-size: 1.8rem;
  }

  .cta-button {
    padding: 18px 24px;
    font-size: 1.1rem;
    border-radius: 16px;
  }

  .feature-card,
  .profile-card {
    padding: 24px;
    border-radius: 20px;
  }

  /* Mobile Login Enhancements */
  .login-card {
    padding: 24px;
    border-radius: 20px;
  }

  .login-button {
    padding: 16px 20px;
    font-size: 1rem;
    border-radius: 12px;
  }

  .demo-fill-button {
    padding: 12px 16px;
    font-size: 0.9rem;
    border-radius: 8px;
  }
}

/* Ultra-small screens (320px and below) */
@media (max-width: 320px) {
  .hero-stats {
    grid-template-columns: 1fr;
    gap: 16px;
  }

  .filter-options {
    gap: 6px;
  }

  .filter-option {
    padding: 6px 12px;
    font-size: 0.8rem;
  }

  .venue-stats {
    grid-template-columns: 1fr;
  }

  .profile-modal-stats {
    grid-template-columns: 1fr;
  }
}

/* Landscape phone orientation */
@media (max-height: 500px) and (orientation: landscape) {
  .app {
    padding-top: 80px; /* Reduced header space */
  }

  .modal-content {
    max-height: 90vh;
  }

  .tab-navigation {
    position: relative; /* Remove sticky on landscape */
  }
}

/* Touch-specific enhancements */
@media (hover: none) and (pointer: coarse) {
  /* Larger touch targets for touch devices */
  .follow-button {
    min-width: 44px;
    min-height: 44px;
  }

  .search-clear,
  .password-toggle,
  .modal-close,
  .notification-close {
    min-width: 44px;
    min-height: 44px;
    padding: 12px;
  }

  /* Remove hover effects on touch devices */
  .venue-card-container:hover,
  .filter-option:hover,
  .action-button:hover {
    transform: none;
  }

  /* Add touch feedback instead */
  .venue-card-container:active {
    transform: scale(0.98);
    opacity: 0.9;
  }

  .filter-option:active,
  .action-button:active,
  .cta-button:active {
    transform: scale(0.95);
    opacity: 0.8;
  }
}

/* iOS Safari specific fixes */
@supports (-webkit-touch-callout: none) {
  .search-input,
  .form-input,
  .form-textarea {
    -webkit-appearance: none;
    border-radius: 12px;
  }

  .modal-content {
    -webkit-overflow-scrolling: touch;
  }
}

/* Android Chrome specific fixes */
@media screen and (-webkit-min-device-pixel-ratio: 0) {
  .search-input:focus,
  .form-input:focus {
    font-size: 16px; /* Prevents zoom */
  }
}

/* High DPI displays (Retina, etc.) */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .venue-card-container {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);
  }

  .modal-content {
    box-shadow: 0 12px 32px rgba(0, 0, 0, 0.25);
  }
}

/* Notification system mobile enhancement */
@media (max-width: 768px) {
  .notification-container {
    top: 8px;
    left: 8px;
    right: 8px;
  }

  .notification {
    border-radius: 12px;
  }

  .notification-content {
    padding: 16px;
  }

  .notification-message {
    font-size: 0.9rem;
    line-height: 1.4;
  }
}

/* Improved accessibility for mobile */
@media (max-width: 768px) {
  /* Larger focus indicators */
  *:focus {
    outline: 3px solid #fbbf24;
    outline-offset: 2px;
  }

  /* Better color contrast for small screens */
  .venue-name,
  .section-title,
  .modal-title {
    color: #0f172a;
    font-weight: 700;
  }

  /* Improved text spacing */
  .review-content p,
  .venue-subtitle,
  .contact-value {
    line-height: 1.5;
  }
}


/* ============================================= */
/* MOBILE-FIRST REDESIGN STYLES */
/* ============================================= */

/* Mobile App Container */
.app.mobile {
  min-height: 100vh;
  background: #f8fafc;
  overflow-x: hidden;
}

.mobile-main {
  padding-top: 70px; /* Account for mobile header */
  padding-bottom: 80px; /* Account for bottom nav */
  min-height: calc(100vh - 150px);
}

/* ============================================= */
/* MOBILE HEADER STYLES */
/* ============================================= */

.mobile-header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: white;
  border-bottom: 1px solid #e2e8f0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.mobile-header-main {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 16px;
  min-height: 60px;
}

.mobile-brand {
  display: flex;
  flex-direction: column;
}

.mobile-app-title {
  font-size: 1.5rem;
  font-weight: 800;
  color: #1e293b;
  margin: 0;
  line-height: 1;
}

.mobile-location {
  font-size: 0.75rem;
  color: #64748b;
  font-weight: 500;
}

.mobile-header-actions {
  display: flex;
  align-items: center;
  gap: 12px;
}

.mobile-icon-button {
  width: 44px;
  height: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
}

.mobile-icon-button:hover {
  background: #f1f5f9;
  color: #374151;
}

.mobile-search-expanded {
  padding: 0 16px 12px;
  background: white;
  border-top: 1px solid #f1f5f9;
}

.mobile-search-container {
  position: relative;
  display: flex;
  align-items: center;
}

.mobile-search-icon {
  position: absolute;
  left: 12px;
  width: 18px;
  height: 18px;
  color: #9ca3af;
  z-index: 1;
}

.mobile-search-input {
  width: 100%;
  padding: 12px 40px 12px 40px;
  border: 2px solid #e5e7eb;
  border-radius: 12px;
  background: #f8fafc;
  font-size: 16px; /* Prevents zoom on iOS */
  color: #1e293b;
  transition: all 0.2s ease;
}

.mobile-search-input:focus {
  outline: none;
  border-color: #3b82f6;
  background: white;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.mobile-search-clear {
  position: absolute;
  right: 8px;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #e5e7eb;
  border: none;
  border-radius: 8px;
  color: #6b7280;
  cursor: pointer;
  transition: all 0.2s ease;
}

.mobile-search-clear:hover {
  background: #d1d5db;
  color: #374151;
}

/* ============================================= */
/* MOBILE BOTTOM NAVIGATION */
/* ============================================= */

.mobile-bottom-nav {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: white;
  border-top: 1px solid #e2e8f0;
  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);
  padding: 8px 0 max(8px, env(safe-area-inset-bottom));
}

.mobile-nav-items {
  display: flex;
  justify-content: space-around;
  align-items: center;
  max-width: 500px;
  margin: 0 auto;
  padding: 0 16px;
}

.mobile-nav-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
  padding: 8px 12px;
  background: none;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  border-radius: 12px;
  min-width: 60px;
}

.mobile-nav-item:hover {
  background: #f8fafc;
}

.mobile-nav-item.active {
  background: rgba(59, 130, 246, 0.1);
}

.mobile-nav-item.active .mobile-nav-icon {
  transform: scale(1.1);
}

.mobile-nav-item.active .mobile-nav-label {
  color: #3b82f6;
  font-weight: 600;
}

.mobile-nav-icon {
  font-size: 1.25rem;
  line-height: 1;
}

.mobile-nav-label {
  font-size: 0.7rem;
  color: #64748b;
  font-weight: 500;
  transition: all 0.2s ease;
}

/* ============================================= */
/* MOBILE HOME VIEW STYLES */
/* ============================================= */

.mobile-home-view {
  padding: 16px;
  max-width: 100%;
}

.mobile-hero {
  margin-bottom: 24px;
}

.mobile-greeting {
  text-align: center;
  margin-bottom: 16px;
}

.mobile-greeting-text {
  font-size: 1.75rem;
  font-weight: 800;
  color: #1e293b;
  margin: 0 0 4px 0;
}

.mobile-greeting-subtitle {
  font-size: 1rem;
  color: #64748b;
  margin: 0;
}

.mobile-refresh-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 12px;
  background: rgba(59, 130, 246, 0.1);
  border-radius: 12px;
  color: #3b82f6;
  font-size: 0.875rem;
  font-weight: 500;
}

.refresh-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(59, 130, 246, 0.2);
  border-top: 2px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.mobile-stats-bar {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 12px;
  margin-bottom: 24px;
}

.mobile-stat {
  background: white;
  padding: 16px;
  border-radius: 16px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  border: 1px solid #f1f5f9;
}

.mobile-stat-number {
  display: block;
  font-size: 1.5rem;
  font-weight: 800;
  color: #1e293b;
  line-height: 1;
}

.mobile-stat-label {
  font-size: 0.75rem;
  color: #64748b;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-top: 4px;
}

.mobile-filters-section {
  margin-bottom: 24px;
}

.mobile-filters-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 12px;
}

.mobile-section-title {
  font-size: 1.125rem;
  font-weight: 700;
  color: #1e293b;
  margin: 0;
}

.mobile-filter-toggle {
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 10px;
  color: #64748b;
  cursor: pointer;
}

.mobile-filters-scroll {
  display: flex;
  gap: 8px;
  overflow-x: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding-bottom: 4px;
}

.mobile-filters-scroll::-webkit-scrollbar {
  display: none;
}

.mobile-filter-chip {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 12px;
  background: white;
  border: 2px solid #e2e8f0;
  border-radius: 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  white-space: nowrap;
  flex-shrink: 0;
  position: relative;
}

.mobile-filter-chip:hover {
  border-color: var(--filter-color, #3b82f6);
  background: rgba(59, 130, 246, 0.05);
}

.mobile-filter-chip.active {
  background: var(--filter-color, #3b82f6);
  border-color: var(--filter-color, #3b82f6);
  color: white;
}

.mobile-filter-icon {
  width: 16px;
  height: 16px;
}

.mobile-filter-label {
  font-size: 0.875rem;
  font-weight: 500;
}

.mobile-filter-count {
  background: rgba(255, 255, 255, 0.2);
  color: white;
  font-size: 0.75rem;
  font-weight: 600;
  padding: 2px 6px;
  border-radius: 10px;
  min-width: 18px;
  text-align: center;
}

.mobile-promos-section {
  margin-bottom: 24px;
}

.mobile-section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 12px;
}

.mobile-see-all {
  display: flex;
  align-items: center;
  gap: 4px;
  background: none;
  border: none;
  color: #3b82f6;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
}

.mobile-promos-scroll {
  display: flex;
  gap: 12px;
  overflow-x: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding-bottom: 4px;
}

.mobile-promos-scroll::-webkit-scrollbar {
  display: none;
}

.mobile-promo-card {
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
  border-radius: 16px;
  padding: 16px;
  min-width: 260px;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  border: 2px solid #f59e0b;
}

.mobile-promo-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(245, 158, 11, 0.3);
}

.mobile-promo-badge {
  position: absolute;
  top: 8px;
  right: 8px;
  background: #dc2626;
  color: white;
  font-size: 0.7rem;
  font-weight: 700;
  padding: 4px 8px;
  border-radius: 6px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.mobile-promo-content {
  margin-top: 8px;
}

.mobile-promo-title {
  font-size: 1rem;
  font-weight: 700;
  color: #92400e;
  margin: 0 0 6px 0;
}

.mobile-promo-text {
  font-size: 0.875rem;
  color: #a16207;
  margin: 0 0 12px 0;
  line-height: 1.4;
}

.mobile-promo-cta {
  display: inline-flex;
  align-items: center;
  padding: 6px 12px;
  background: #92400e;
  color: white;
  font-size: 0.8rem;
  font-weight: 600;
  border-radius: 8px;
}

.mobile-venues-section {
  margin-bottom: 24px;
}

.mobile-venues-count {
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 500;
}

.mobile-venues-feed {
  display: flex;
  flex-direction: column;
  gap: 16px;
  margin-top: 16px;
}

.mobile-empty-state {
  text-align: center;
  padding: 40px 20px;
  background: white;
  border-radius: 20px;
  margin: 20px 0;
}

.mobile-empty-icon {
  font-size: 3rem;
  margin-bottom: 16px;
}

.mobile-empty-title {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
  margin: 0 0 8px 0;
}

.mobile-empty-description {
  font-size: 0.875rem;
  color: #64748b;
  margin: 0 0 20px 0;
  line-height: 1.5;
}

.mobile-empty-action {
  background: var(--gradient-primary);
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.mobile-empty-action:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.mobile-pull-refresh {
  text-align: center;
  padding: 20px;
  color: #9ca3af;
  font-size: 0.875rem;
}

/* ============================================= */
/* MOBILE VENUE CARD STYLES */
/* ============================================= */

.mobile-venue-card {
  background: white;
  border-radius: 20px;
  padding: 20px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  border: 1px solid #f1f5f9;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
}

.mobile-venue-card:active {
  transform: scale(0.98);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
}

.mobile-venue-header {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  margin-bottom: 16px;
}

.mobile-venue-info {
  flex: 1;
  min-width: 0;
}

.mobile-venue-name {
  font-size: 1.125rem;
  font-weight: 700;
  color: #1e293b;
  margin: 0 0 6px 0;
  line-height: 1.2;
}

.mobile-venue-meta {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-wrap: wrap;
}

.mobile-venue-type {
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 500;
}

.mobile-venue-dot {
  color: #d1d5db;
  font-size: 0.875rem;
}

.mobile-venue-rating {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.875rem;
  font-weight: 600;
  color: #1e293b;
}

.mobile-rating-star {
  width: 14px;
  height: 14px;
  color: #fbbf24;
  fill: currentColor;
}

.mobile-venue-actions {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-shrink: 0;
}

.mobile-quick-call {
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 10px;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
}

.mobile-quick-call:hover {
  background: #3b82f6;
  border-color: #3b82f6;
  color: white;
}

.mobile-status-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 16px;
  flex-wrap: wrap;
  gap: 8px;
}

.mobile-status-item {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  border-radius: 12px;
  font-size: 0.875rem;
  font-weight: 500;
}

.mobile-status-item.crowd {
  background: rgba(239, 68, 68, 0.1);
  color: #dc2626;
}

.mobile-status-item.wait {
  background: rgba(16, 185, 129, 0.1);
  color: #059669;
}

.mobile-status-icon {
  width: 14px;
  height: 14px;
}

.mobile-status-update {
  font-size: 0.75rem;
  color: #9ca3af;
  font-weight: 500;
}

.mobile-vibe-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  margin-bottom: 16px;
}

.mobile-vibe-tag {
  padding: 4px 8px;
  background: rgba(59, 130, 246, 0.1);
  color: #3b82f6;
  border-radius: 8px;
  font-size: 0.75rem;
  font-weight: 500;
}

.mobile-vibe-tag.more {
  background: #f1f5f9;
  color: #64748b;
}

.mobile-promotion-banner {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
  border-radius: 12px;
  margin-bottom: 16px;
  border: 1px solid #f59e0b;
}

.mobile-promo-icon {
  font-size: 1rem;
  flex-shrink: 0;
}

.mobile-promo-text {
  font-size: 0.875rem;
  color: #92400e;
  font-weight: 500;
  line-height: 1.3;
}

.mobile-venue-footer {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.mobile-venue-stats {
  display: flex;
  align-items: center;
  gap: 16px;
}

.mobile-stat-item {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 0.875rem;
  color: #64748b;
}

.mobile-stat-icon {
  width: 14px;
  height: 14px;
}

.mobile-view-details {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 8px 12px;
  background: rgba(59, 130, 246, 0.1);
  color: #3b82f6;
  border-radius: 10px;
  font-size: 0.875rem;
  font-weight: 500;
}

/* ============================================= */
/* MOBILE VENUE DETAILS STYLES */
/* ============================================= */

.mobile-venue-details {
  background: #f8fafc;
  min-height: 100vh;
  padding-bottom: 80px; /* Bottom nav space */
}

.mobile-details-header {
  position: sticky;
  top: 0;
  z-index: 100;
  background: white;
  padding: 12px 16px;
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  align-items: center;
  gap: 12px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.mobile-back-button {
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.mobile-back-button:hover {
  background: #f1f5f9;
  color: #374151;
}

.mobile-header-title {
  flex: 1;
  min-width: 0;
}

.mobile-venue-title {
  font-size: 1.125rem;
  font-weight: 700;
  color: #1e293b;
  margin: 0;
  line-height: 1.2;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.mobile-venue-subtitle {
  font-size: 0.875rem;
  color: #64748b;
  margin: 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.mobile-share-button {
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.mobile-share-button:hover {
  background: #3b82f6;
  border-color: #3b82f6;
  color: white;
}

.mobile-hero-card {
  background: white;
  margin: 16px;
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  border: 1px solid #f1f5f9;
}

.mobile-hero-content {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.mobile-hero-rating {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.mobile-rating-display {
  display: flex;
  align-items: center;
  gap: 8px;
}

.mobile-rating-score {
  font-size: 2rem;
  font-weight: 800;
  color: #1e293b;
  line-height: 1;
}

.mobile-rating-stars {
  display: flex;
  gap: 2px;
}

.mobile-rating-count {
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 500;
}

.mobile-hero-address {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  background: #f8fafc;
  border-radius: 12px;
}

.mobile-address-icon {
  width: 16px;
  height: 16px;
  color: #64748b;
  flex-shrink: 0;
}

.mobile-address-text {
  font-size: 0.875rem;
  color: #374151;
  font-weight: 500;
}

.mobile-status-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 12px;
  margin: 0 16px 20px;
}

.mobile-status-card {
  background: white;
  padding: 16px;
  border-radius: 16px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  border: 1px solid #f1f5f9;
}

.mobile-status-card.crowd {
  border-color: #fca5a5;
  background: #fef2f2;
}

.mobile-status-card.wait {
  border-color: #86efac;
  background: #f0fdf4;
}

.mobile-status-card.followers {
  border-color: #fbbf24;
  background: #fffbeb;
}

.mobile-status-card-icon {
  width: 20px;
  height: 20px;
  margin: 0 auto 8px;
  color: #64748b;
}

.mobile-status-info {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.mobile-status-label {
  font-size: 0.75rem;
  color: #64748b;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.mobile-status-value {
  font-size: 1rem;
  font-weight: 700;
  color: #1e293b;
}

.mobile-action-bar {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 12px;
  margin: 0 16px 24px;
}

.mobile-action-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  padding: 16px;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 16px;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
}

.mobile-action-button.call {
  border-color: #3b82f6;
  background: rgba(59, 130, 246, 0.05);
  color: #3b82f6;
}

.mobile-action-button.directions {
  border-color: #10b981;
  background: rgba(16, 185, 129, 0.05);
  color: #059669;
}

.mobile-action-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.mobile-promotion-card {
  background: linear-gradient(135deg, #fef3c7, #fbbf24);
  margin: 0 16px 24px;
  padding: 20px;
  border-radius: 20px;
  border: 2px solid #f59e0b;
  display: flex;
  align-items: center;
  gap: 16px;
}

.mobile-promo-icon {
  font-size: 2rem;
  flex-shrink: 0;
}

.mobile-promo-content {
  flex: 1;
}

.mobile-promo-title {
  font-size: 1.125rem;
  font-weight: 700;
  color: #92400e;
  margin: 0 0 6px 0;
}

.mobile-promo-text {
  font-size: 0.875rem;
  color: #a16207;
  margin: 0;
  line-height: 1.4;
}

.mobile-content-sections {
  padding: 0 16px;
}

.mobile-content-section {
  background: white;
  margin-bottom: 16px;
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  border: 1px solid #f1f5f9;
}

.mobile-section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 16px;
}

.mobile-toggle-button {
  display: flex;
  align-items: center;
  gap: 4px;
  background: none;
  border: none;
  color: #3b82f6;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
}

.mobile-vibe-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.mobile-vibe-tag-large {
  padding: 8px 12px;
  background: var(--gradient-primary);
  color: white;
  border-radius: 12px;
  font-size: 0.875rem;
  font-weight: 500;
}

.mobile-amenities-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 12px;
}

.mobile-amenity-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
  position: relative;
}

.mobile-amenity-item.available {
  background: #f0fdf4;
  border-color: #bbf7d0;
}

.mobile-amenity-item.unavailable {
  background: #fafafa;
  border-color: #e5e7eb;
  opacity: 0.6;
}

.mobile-amenity-icon {
  width: 20px;
  height: 20px;
  flex-shrink: 0;
  color: #64748b;
}

.mobile-amenity-item.available .mobile-amenity-icon {
  color: #059669;
}

.mobile-amenity-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
  flex: 1;
}

.mobile-amenity-check {
  color: #059669;
  font-weight: 700;
  font-size: 1rem;
}

.mobile-write-review {
  padding: 8px 16px;
  background: var(--gradient-primary);
  color: white;
  border: none;
  border-radius: 10px;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.mobile-write-review:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
}

.mobile-reviews-summary {
  background: #f8fafc;
  padding: 20px;
  border-radius: 16px;
  margin-bottom: 20px;
  text-align: center;
}

.mobile-review-score {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
}

.mobile-score-large {
  font-size: 3rem;
  font-weight: 800;
  color: #1e293b;
  line-height: 1;
}

.mobile-score-stars {
  display: flex;
  gap: 4px;
}

.mobile-score-text {
  font-size: 0.875rem;
  color: #64748b;
}

.mobile-reviews-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.mobile-review-card {
  padding: 16px;
  background: #f8fafc;
  border-radius: 16px;
  border: 1px solid #e2e8f0;
}

.mobile-review-header {
  margin-bottom: 12px;
}

.mobile-reviewer {
  display: flex;
  align-items: center;
  gap: 12px;
}

.mobile-reviewer-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--gradient-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  flex-shrink: 0;
}

.mobile-reviewer-info {
  flex: 1;
}

.mobile-reviewer-name {
  font-size: 0.875rem;
  font-weight: 600;
  color: #1e293b;
  display: block;
  margin-bottom: 4px;
}

.mobile-review-meta {
  display: flex;
  align-items: center;
  gap: 8px;
}

.mobile-review-date {
  font-size: 0.75rem;
  color: #9ca3af;
}

.mobile-review-text {
  font-size: 0.875rem;
  color: #374151;
  line-height: 1.5;
  margin: 0 0 12px 0;
}

.mobile-helpful-button {
  background: #f1f5f9;
  border: 1px solid #e2e8f0;
  padding: 6px 12px;
  border-radius: 8px;
  font-size: 0.75rem;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
}

.mobile-helpful-button:hover {
  background: #e2e8f0;
  color: #374151;
}

.mobile-show-more-reviews {
  width: 100%;
  padding: 12px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  color: #374151;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-top: 16px;
}

.mobile-show-more-reviews:hover {
  background: #f1f5f9;
  color: #1e293b;
}

.mobile-contact-grid {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.mobile-contact-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 16px;
  background: #f8fafc;
  border-radius: 16px;
  border: 1px solid #e2e8f0;
}

.mobile-contact-icon {
  width: 20px;
  height: 20px;
  color: #64748b;
  flex-shrink: 0;
}

.mobile-contact-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.mobile-contact-label {
  font-size: 0.75rem;
  color: #9ca3af;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.mobile-contact-value {
  font-size: 0.875rem;
  color: #374151;
  font-weight: 500;
}

.mobile-contact-action {
  padding: 8px 16px;
  background: #3b82f6;
  color: white;
  border: none;
  border-radius: 10px;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.mobile-contact-action:hover {
  background: #2563eb;
  transform: translateY(-1px);
}

.mobile-action-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}

.mobile-action-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  padding: 20px;
  border-radius: 16px;
  cursor: pointer;
  transition: all 0.2s ease;
  border: 2px solid transparent;
}

.mobile-action-card.primary {
  background: rgba(59, 130, 246, 0.1);
  border-color: #3b82f6;
  color: #3b82f6;
}

.mobile-action-card.secondary {
  background: rgba(16, 185, 129, 0.1);
  border-color: #10b981;
  color: #059669;
}

.mobile-action-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

.mobile-action-icon {
  width: 24px;
  height: 24px;
}

.mobile-action-label {
  font-size: 0.875rem;
  font-weight: 600;
  text-align: center;
}

.mobile-bottom-padding {
  height: 40px;
}

/* ============================================= */
/* MOBILE RESPONSIVE ADJUSTMENTS */
/* ============================================= */

@media (max-width: 375px) {
  .mobile-stats-bar {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .mobile-status-grid {
    grid-template-columns: 1fr;
  }
  
  .mobile-action-bar {
    grid-template-columns: 1fr;
  }
  
  .mobile-action-grid {
    grid-template-columns: 1fr;
  }
  
  .mobile-filters-scroll {
    gap: 6px;
  }
  
  .mobile-filter-chip {
    padding: 6px 10px;
  }
}

@media (max-width: 320px) {
  .mobile-home-view,
  .mobile-content-sections {
    padding: 12px;
  }
  
  .mobile-hero-card,
  .mobile-promotion-card {
    margin: 0 12px 16px;
  }
  
  .mobile-content-section {
    padding: 16px;
  }
}

/* Landscape orientation */
@media (max-height: 500px) and (orientation: landscape) {
  .mobile-main {
    padding-top: 60px;
    padding-bottom: 60px;
  }
  
  .mobile-bottom-nav {
    padding: 4px 0 max(4px, env(safe-area-inset-bottom));
  }
  
  .mobile-nav-item {
    padding: 6px 8px;
  }
  
  .mobile-nav-icon {
    font-size: 1rem;
  }
  
  .mobile-nav-label {
    font-size: 0.65rem;
  }
}

/* iOS Safari specific */
@supports (-webkit-touch-callout: none) {
  .mobile-bottom-nav {
    padding-bottom: max(8px, env(safe-area-inset-bottom));
  }
  
  .mobile-main {
    padding-bottom: calc(80px + env(safe-area-inset-bottom));
  }
  
  .mobile-venue-details {
    padding-bottom: calc(80px + env(safe-area-inset-bottom));
  }
}

/* High DPI displays */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .mobile-venue-card,
  .mobile-content-section,
  .mobile-hero-card {
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
  }
}


----------------------------------------
üé® CSS AND STYLING ANALYSIS
===========================
CSS files found:
üìÑ src/styles/password-reset.css (464 lines)
üìÑ src/App.css (7807 lines)
üìÑ src/password-reset.css (464 lines)
üìÑ src/components/PrivacyPolicy.css (202 lines)
üìÑ src/components/TermsAndConditions.css (173 lines)
üìÑ src/components/Registration/availability.css (276 lines)
üìÑ src/availability.css (40 lines)

üîç Checking for button-related CSS rules:
üìÑ src/styles/password-reset.css contains button-related styles:
339:   Link Button Enhancements
342:.link-button {
352:.link-button:hover {

üìÑ src/App.css contains button-related styles:
111:  z-index: 2;
366:.cta-button {
388:.cta-button:hover {
454:  z-index: 2;
467:.back-button {
482:.back-button:hover {
554:.demo-fill-button {
567:.demo-fill-button:hover {
601:  z-index: 1;
656:.login-button {
674:.login-button:hover:not(:disabled) {
679:.login-button:disabled {
762:  z-index: 1000;
825:  z-index: 1;
883:.user-profile-button {
899:.user-profile-button:hover {
957:.user-profile-button:hover .profile-chevron {
1357:.details-btn-full {
1375:.details-btn-full:hover {
1381:/* FOLLOW BUTTON STYLES */
1384:.follow-button {
1397:.follow-button.w-8 { width: 32px; height: 32px; }
1398:.follow-button.w-10 { width: 40px; height: 40px; }
1399:.follow-button.w-12 { width: 48px; height: 48px; }
1401:.follow-button:hover {
1407:.follow-button.followed {
1413:.follow-button.followed:hover {
1418:.follow-button-text {
1434:.follow-button-text:hover {
1439:.follow-button-text.followed {
1536:  z-index: 9999;
1584:.modal-close-button {
1595:  z-index: 1;
1598:.modal-close-button:hover {
1614:.cancel-button {
1625:.cancel-button:hover {
1630:.submit-button {
1644:.submit-button:hover:not(:disabled) {
1648:.submit-button:disabled {
1852:.report-type-button {
1866:.report-type-button:hover {
1872:.report-type-button.active {
2005:.share-buttons {
2012:.share-option-button {
2026:.share-option-button:hover {
2031:.share-option-button.success {
2074:  z-index: 100;
2082:.share-button-header {
2099:.share-button-header:hover {
2246:.tab-buttons {
2255:.tab-buttons::-webkit-scrollbar {
2259:.tab-button {
2277:.tab-button:hover {
2282:.tab-button.active {
2412:.action-button {
2428:.action-button.primary {
2433:.action-button.primary:hover {
2438:.action-button.secondary {
2444:.action-button.secondary:hover {
2528:.write-review-button {
2542:.write-review-button:hover {
2616:.helpful-button {
2629:.helpful-button:hover {
2743:.nav-button {
2757:.nav-button:hover {
2762:.nav-button svg {
2814:  z-index: 10000;
3022:  .action-button {
3092:  .submit-button,
3093:  .cancel-button {
3099:.tab-button:focus,
3100:.action-button:focus,
3101:.nav-button:focus,
3103:.helpful-button:focus,
3104:.write-review-button:focus,
3107:.follow-button:focus,
3108:.details-btn-full:focus,
3109:.cta-button:focus,
3110:.login-button:focus,
3111:.back-button:focus,
3112:.user-profile-button:focus {
3136:  .cta-button:hover,
3137:  .login-button:hover,
3138:  .action-button:hover {
3173:  .follow-button,
3174:  .action-button,
3176:  .tab-button,
3178:  .nav-button,
3179:  .details-btn-full {
3205:    z-index: 1001;
3236:    z-index: 1;
3248:    z-index: 100;
3253:  .tab-button {
3277:  .action-button {
3287:  .nav-button {
3384:  .cta-button {
3402:  .login-button {
3408:  .demo-fill-button {
3458:  .follow-button {
3475:  .action-button:hover {
3486:  .action-button:active,
3487:  .cta-button:active {
3599:  z-index: 1000;
3638:.mobile-icon-button {
3652:.mobile-icon-button:hover {
3675:  z-index: 1;
3726:  z-index: 1000;
4359:  z-index: 100;
4369:.mobile-back-button {
4384:.mobile-back-button:hover {
4414:.mobile-share-button {
4429:.mobile-share-button:hover {
4567:.mobile-action-button {
4583:.mobile-action-button.call {
4589:.mobile-action-button.directions {
4595:.mobile-action-button:hover {
4654:.mobile-toggle-button {
4847:.mobile-helpful-button {
4858:.mobile-helpful-button:hover {
5107:  z-index: 2;
5152:.demo-fill-button {
5179:.login-button {
5295:  .login-button {
5335:  .back-button {
5377:  .demo-fill-button {
5388:  .login-button {
5397:  .back-button {
5435:  .login-button {
5494:  .login-button {
5515:  .login-button {
5520:  .demo-fill-button {
5542:  .login-button {
5552:  .login-button,
5553:  .demo-fill-button {
5571:.login-button,
5572:.demo-fill-button,
5573:.back-button,
5709:    z-index: 0;
5728:    z-index: 1;
5746:.registration-back-button {
5762:.registration-back-button:hover {
6004:    z-index: 1;
6012:    z-index: 1;
6037:    z-index: 1;
6058:    pointer-events: none;
6059:    z-index: 1;
6171:.nav-button {
6186:.nav-button.primary {
6192:.nav-button.primary:hover:not(:disabled) {
6197:.nav-button.secondary {
6203:.nav-button.secondary:hover:not(:disabled) {
6207:.nav-button:disabled {
6258:    .nav-button {
6342:    .nav-button,
6346:    .registration-back-button {
6356:.nav-button:focus,
6360:.registration-back-button:focus {
6396:    z-index: 1;
6476:/* Unique Suggestion Buttons */
6481:.unique-button {
6496:.unique-button:hover {
6557:    z-index: 1;
6574:    z-index: 1;
6706:z-index: 0;
6725:z-index: 1;
6743:.verification-back-button {
6759:.verification-back-button:hover {
6836:.verification-button {
6851:.verification-button.primary {
6856:.verification-button.primary:hover:not(:disabled) {
6861:.verification-button:disabled {
6906:.resend-button {
6924:.resend-button:hover:not(:disabled) {
6929:.resend-button:disabled {
6963:.resend-button {
6984:.verification-button,
6985:.verification-back-button,
6986:.resend-button {
6992:.verification-button:focus,
6993:.verification-back-button:focus,
6994:.resend-button:focus {
7018:z-index: 0;
7037:z-index: 1;
7055:.verification-back-button {
7071:.verification-back-button:hover {
7148:.verification-button {
7163:.verification-button.primary {
7168:.verification-button.primary:hover:not(:disabled) {
7173:.verification-button:disabled {
7218:.resend-button {
7236:.resend-button:hover:not(:disabled) {
7241:.resend-button:disabled {
7275:.resend-button {
7296:.verification-button,
7297:.verification-back-button,
7298:.resend-button {
7304:.verification-button:focus,
7305:.verification-back-button:focus,
7306:.resend-button:focus {
7417:.retry-button {
7430:.retry-button:hover {
7750:  .retry-button {

üìÑ src/password-reset.css contains button-related styles:
339:   Link Button Enhancements
342:.link-button {
352:.link-button:hover {

üìÑ src/components/PrivacyPolicy.css contains button-related styles:
14:  z-index: 100;

üìÑ src/components/TermsAndConditions.css contains button-related styles:
14:  z-index: 100;

üìÑ src/components/Registration/availability.css contains button-related styles:
9:  z-index: 10;
69:.suggestion-button {
82:.suggestion-button:hover {
186:  z-index: 10;

üìÑ src/availability.css contains button-related styles:
27:.suggestion-button {
38:.suggestion-button:hover {

üö® POTENTIAL ERROR SOURCES
==========================
üîç Checking for common error patterns:
useEffect usage:
Total useEffect calls: 187
Console statements:
Total console statements: 519

üîç Checking for potential undefined references:
src/App.jsx.backup-ultra-safe-corrected-20250603_234418:    console.error('App state is undefined');
src/App-backup:    console.error('App state is undefined');
src/ExistingApp.jsx.sace100625:    console.error('App state is undefined');
src/ExistingApp.jsx.save090625:    console.error('App state is undefined');
src/ExistingApjsx-backup:    console.error('App state is undefined');

üñ±Ô∏è  EVENT HANDLER ANALYSIS
==========================
onClick handlers found:
Total onClick handlers: 285

Sample onClick handlers:
src/ExistingApp.jsx.sace100625:              <button onClick={handleBackToLogin} className="cta-button">
src/ExistingApp.jsx.save:          <button onClick={onBack} className="registration-back-button">
src/ExistingApp.jsx.save:              onClick={handlePrevStep}
src/ExistingApp.jsx.save:              onClick={handleNextStep}
src/ExistingApp.jsx.save:              onClick={handleRegistration}
src/ExistingApp.jsx.save:        onClick={() => onChange('userType', 'user')}
src/ExistingApp.jsx.save:        onClick={() => onChange('userType', 'business')}
src/ExistingApp.jsx.save:                  onClick={() => onChange('username', suggestion)}
src/ExistingApp.jsx.save:                onClick={() => setShowPassword(!showPassword)}
src/ExistingApp.jsx.save:                onClick={() => setShowPasswordConfirm(!showPasswordConfirm)}

üì• IMPORT ANALYSIS
==================
üîç Checking for import issues:
Import statements per file:
src/ExistingApp.jsx: 19 imports
src/router/AppRouter.jsx: 8 imports
src/components/Views/VenueDetailsView.jsx: 8 imports
src/components/Registration/RegistrationView.jsx: 8 imports
src/components/Venue/VenueCard.jsx: 6 imports
src/__tests__/components/Views/ResetPasswordView.test.js: 5 imports
src/__tests__/components/Views/ForgotPasswordView.test.js: 5 imports
src/components/Views/ResetPasswordView.jsx: 5 imports
src/components/Social/ShareModal.jsx: 5 imports
src/App.jsx: 5 imports

üè™ STATE MANAGEMENT ANALYSIS
============================
useState usage:
Total useState calls: 371
Context usage:
Total context calls: 150

üîß BUILD AND RUNTIME ANALYSIS
=============================
Checking package-lock.json for version conflicts...
‚úÖ package-lock.json exists
React entries in lock file: 9

üñ•Ô∏è  DEVELOPMENT SERVER ANALYSIS
===============================
Checking for development scripts:
{
  "name": "nytevibe",
  "private": true,
  "version": "2.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {

üåê BROWSER COMPATIBILITY CHECK
==============================
‚ùå No browserslist configuration found

üéØ DIAGNOSTIC SUMMARY & ACTION PLAN
===================================
Based on the analysis above, here are the most likely issues and solutions:

1. Check main.jsx AppProvider integration
2. Verify LoginView component event handlers
3. Check for CSS interference (pointer-events, z-index)
4. Verify React Context is properly initialized
5. Check for JavaScript errors in browser console
6. Verify all imports are resolving correctly

üèÅ DIAGNOSTIC COMPLETE
======================
Report saved to: diagnostic_report_20250610_103743.txt
Next step: Review the analysis above and implement targeted fixes
